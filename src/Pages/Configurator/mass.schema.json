{
  "$id": "http://alucard2112.github.io/qped.github.io/schemas/mass.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema",
  "description": "Enter the description configuration of the Marburg university Auto Assess System (MASS), part of the QPED project.",
  "documentation": "The [Marburg university Auto Assess System (MASS)](http://qped.github.io) is part of the project [Quality-focussed Programming Education (QPED)](https://qped.eu), co-funded by the [Erasmus+-Program of the European Union](https://erasmus-plus.ec.europa.eu) (2020-1-NL01-KA203-064626).\n\nMASS performs checks on student solutions to programming assignents in the Java language, with respect to different aspects: syntax, style, solution approach, testing and design. Only the syntax check is mandatory, all other checks are optional. In this configuration, lectures can specify which checks that want to be performed on student solutions and configure these checks according to the requirements of their assignment.",
  "type": "object",
  "title": "QPED-MASS Configuration",
  "additionalProperties": false,
  "properties": {
    "instructorResources": {
      "type": "string",
      "format": "uri",
      "title": "Instructor Resources",
      "description": "Specify the URL of a ZIP-file containing instructor resources that should be added to the root directory of student resources.",
      "documentation": "The instructor resources must be provided as a Zip-file. This will be extracted and all contained files will be copied into folder containing the code submitted by a student (and possible overwrite parts of their implementation) before the student solution is compiled. The location of the instructor resources is provided as URL. In addition to the usual protocols (like http) the custom protocol qf is supported. A URL of the form 'qf:label.extension' refers to a file uploaded to the Quarterfall assignment with the specified label and extension."
    },
    "syntax": {
      "type": "object",
      "title": "Syntax Check Configuration",
      "description": "Configure for the Syntax Checker.",
      "documentation": "Configure for the Syntax Checker.",
      "additionalProperties": false,
      "properties": {
        "level": {
          "type": "string",
          "title": "Student Level",
          "description": "Select the level of programming experience for the target student audience.",
          "documentation": "Select the level of programming experience for the target student audience. BEGINNER for programming beginner. ADVANCED for programmer with experience.",
          "enum": [
            "BEGINNER",
            "ADVANCED"
          ],
          "default": "BEGINNER"
        }
      },
      "required": [
        "level"
      ]
    },
    "styleSelected": {
      "type": "boolean",
      "title": "Enable Style Checker",
      "description": "Enable the configuration of the Style Checker.",
      "documentation": "Enable the configuration of the Style Checker.",
      "default": false
    },
    "style": {
      "type": "object",
      "title": "Style Check Configuration",
      "description": "Configure the Style Checker.",
      "documentation": "Configure the Style Checker.",
      "properties": {
        "basisLevel": {
          "type": "string",
          "title": "Naming Conventions Level",
          "description": "Select the level of programming experience for the target student audience.",
          "documentation": "Select the level of programming experience for the target student audience.\\n\\nChecks for observance of naming conventions for methods, fields, local variables and classes, and whether required  comments for methods, classes, and fields are present.",
          "enum": [
            "BEGINNER",
            "INTERMEDIATE",
            "ADVANCED"
          ],
          "default": "BEGINNER"
        },
        "complexityLevel": {
          "type": "string",
          "title": "Complexity Level",
          "description": "Select the level of programming experience for the target student audience.",
          "documentation": "Select the level of programming experience for the target student audience.\\n\\nThe complexity refers to the number of methods, fields, imports, method parameters and classes.",
          "enum": [
            "BEGINNER",
            "INTERMEDIATE",
            "ADVANCED"
          ],
          "default": "BEGINNER"
        },
        "namesLevel": {
          "type": "string",
          "title": "Naming Conventions Level",
          "description": "Select the level of programming experience for the target student audience.",
          "documentation": "Select the level of programming experience for the target student audience.\\n\\nChecks for observance of naming conventions for methods, fields, local variables and classes, and whether required  comments for methods, classes, and fields are present.",
          "enum": [
            "BEGINNER",
            "INTERMEDIATE",
            "ADVANCED"
          ],
          "default": "BEGINNER"
        },
        "classLength": {
          "type": "integer",
          "title": "Class Length",
          "description": "Specify the maximum amount of lines per class (-1 for no threshold).",
          "documentation": "Specify the maximum amount of lines per class (-1 for no threshold).",
          "default": -1
        },
        "methodLength": {
          "type": "integer",
          "title": "Method Length",
          "description": "Specify the maximum amount of lines per method (-1 for no threshold).",
          "documentation": "Specify the maximum amount of lines per method (-1 for no threshold).",
          "default": -1
        },
        "cyclomaticComplexity": {
          "type": "integer",
          "title": "Cyclomatic Complexity",
          "description": "Specify the maximum cyclomatic complexity (-1 for no threshold).",
          "documentation": "Specify the maximum cyclomatic complexity (-1 for no threshold).",
          "default": -1
        },
        "fieldsCount": {
          "type": "integer",
          "title": "Number of Fields per Class",
          "description": "Specify the maximum number of fields per class (-1 for no threshold).",
          "documentation": "Specify the maximum number of fields per class (-1 for no threshold).",
          "default": -1
        },
        "variableNamePattern": {
          "type": "string",
          "format": "regex",
          "title": "Variable Naming Conventions",
          "description": "Specify a regular expression that variale names must match.",
          "documentation": "Specify a regular expression that variale names must match.",
          "default": "[a-z][a-zA-Z0-9]*"
        },
        "methodNamePattern": {
          "type": "string",
          "format": "regex",
          "title": "Method Naming Conventions",
          "description": "Specify a regular expression that method names must match.",
          "documentation": "Specify a regular expression that method names must match.",
          "default": "[a-z][a-zA-Z0-9]*"
        },
        "methodParameterNamePattern": {
          "type": "string",
          "format": "regex",
          "title": "Method-Parameter Naming Conventions",
          "description": "Specify a regular expression that method-parameter names must match.",
          "documentation": "Specify a regular expression that method-parameter names must match.",
          "default": "[a-z][a-zA-Z0-9]*"
        },
        "classNamePattern": {
          "type": "string",
          "format": "regex",
          "title": "Class Naming Conventions",
          "description": "Specify a regular expression that class names must match.",
          "documentation": "Specify a regular expression that class names must match.",
          "default": "[A-Z][a-zA-Z0-9_]*"
        }
      }
    },
    "semanticSelected": {
      "type": "boolean",
      "title": "Enable Solution Approach Checker",
      "description": "Enable the configuration of the Solution Approach Checker.",
      "documentation": "Enable the configuration of the Solution Approach Checker.",
      "default": false
    },
    "semantic": {
      "type": "object",
      "title": "Solution Approach Checker Configuration",
      "description": "Configure for the Semantic Checker.",
      "documentation": "Configure for the Semantic Checker.",
      "additionalProperties": false,
      "properties": {
        "semantics": {
          "type": "array",
          "title": "Per method configuration:",
          "description": "Configure the Solution Approach Checker (Solution Approach) per method.",
          "documentation": "Configure the Solution Approach Checker (Solution Approach) per method.\\n\\nThis checker can give feedback on whether requirements for the solution approach (e.g., usage of loops or recursion) are met.",
          "items": {
            "type": "object",
            "title": "Requirements per Method",
            "description": "Specify which methods have requirements on the solution approach and which requirements that are. ",
            "documentation": "Specify which methods have requirements on the solution approach and which requirements that are. ",
            "properties": {
              "filePath": {
                "type": "string",
                "title": "File Path",
                "default":"",
                "description": "Specify the file path. The file path is fully qualified path for the file from source root.",
                "documentation": "Specify the file path. The file path is fully qualified path for the file from source root."
              },
              "methodName": {
                "type": "string",
                "title": "Method Name",
                "description": "Specify the method name for which the constraints are checked.",
                "documentation": "Specify the method name for which the constraints are checked."
              },
              "returnType": {
                "type": "string",
                "title": "Method Return Type",
                "description": "Specify the expected return type of the method for which the constraints are checked, e.g., void, int,...",
                "documentation": "Specify the expected return type of the method for which the constraints are checked, e.g., void, int,..."
              },
              "recursive": {
                "type": "boolean",
                "title": "Recursive Method",
                "description": "Specify whether this method should be recursive.",
                "documentation": "Specify whether this method should be recursive.",
                "default": false
              },
              "whileLoop": {
                "type": "integer",
                "title": "Number of While Loops",
                "description": "Specify the maximum number of while loops allowed in this method (-1 for no threshold).",
                "documentation": "Specify the maximum number of while loops allowed in this method (-1 for no threshold).",
                "default": -1
              },
              "forLoop": {
                "type": "integer",
                "title": "Number of For Loops",
                "description": "Specify the maximum number of for loops (not counting forEach loops) allowed in this method (-1 for no threshold).",
                "documentation": "Specify the maximum number of for loops (not counting forEach loops) allowed in this method (-1 for no threshold).",
                "default": -1
              },
              "forEachLoop": {
                "type": "integer",
                "title": "Number of ForEach Loops",
                "description": "Specify the maximum number of forEach loops allowed in this method (-1 for no threshold).",
                "documentation": "Specify the maximum number of forEach loops allowed in this method (-1 for no threshold).",
                "default": -1
              },
              "doWhileLoop": {
                "type": "integer",
                "title": "Number of Do-While Loops",
                "description": "Specify the maximum number of do-while loops allowed in this method (-1 for no threshold).",
                "documentation": "Specify the maximum number of do-while loops allowed in this method (-1 for no threshold).",
                "default": -1
              },
              "ifElseStmt": {
                "type": "integer",
                "title": "Number of If Statments",
                "description": "Specify the maximum number of if statements allowed in this method (-1 for no threshold).",
                "documentation": "Specify the maximum number of if statements allowed in this method (-1 for no threshold).",
                "default": -1
              }
            },
            "required": [
              "methodName",
              "filePath"
            ]
          }
        }
      }
    },
    "coverageSelected": {
      "type": "boolean",
      "title": "Enable Test Coverage Checker",
      "description": "Enable the configuration of the Test Coverage Checker.",
      "documentation": "Enable the configuration of the Test Coverage Checker.",
      "default": false
    },
    "coverage": {
      "type": "object",
      "title": "Test Coverage Check Configuration",
      "description": "Configure the Test Coverage Checker.",
      "documentation": "Configure the Test Coverage Checker.",
      "properties": {
        "showTestFailures": {
          "type": "boolean",
          "description": "Specify whether to show a description of the failed tests.",
          "default": true,
          "title": "Show Test Failures"
        },
        "showFullCoverageReport": {
          "type": "boolean",
          "description": "Specify whether to show a full report of the test coverage.",
          "default": false,
          "title": "Show Full Report"
        },
        "feedback": {
          "type": "array",
          "title": "Feedback Configuration",
          "description": "Specify the feedback messages per coverage miss.",
          "documentation": "Specify the feedback messages per coverage miss.",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "ID": {
                "type": "string",
                "pattern": "\\s*[_a-zA-Z0-9]+\\s*",
                "title": "Message ID",
                "description": "You can optionally specify a unique name to this feedback message to define constraints between messages."
              },
              "showFor": {
                "type": "string",
                "enum": [
                  "FULLY_MISSED",
                  "PARTIALLY_MISSED"
                ],
                "enumDesc": "Message is applicable if code is fully missed or at least partially missed. For information on partial coverage see [JaCoCo](https://www.jacoco.org/jacoco/trunk/doc/counters.html).",
                "title": "Kind of Coverage Miss",
                "default": "PARTIALLY_MISSED",
                "description": "Specify whether to show the message only when all lines in the range are completely missed or they are at least partially missed. For information on partial coverage see [JaCoCo](https://www.jacoco.org/jacoco/trunk/doc/counters.html)."
              },
              "fileName": {
                "type": "string",
                "title": "File Name",
                "description": "Specify the source file containing the lines you refer to. The file must use / as path separator, include the extension (usually .java) and the path must correspond to the package of the contained class.",
                "pattern": "\\s*[_$a-zA-Z0-9]+(/[_$a-zA-Z0-9]+)*.[a-zA-Z0-9]*\\s*"
              },
              "lineRanges": {
                "type": "string",
                "pattern": "\\s*\\d+(\\s*-\\s*\\d+)?\\s*(,\\s*\\d+(\\s*-\\s*\\d+)?\\s*)*",
                "title": "Line Ranges",
                "description": "Specify relevant missed or partially missed lines as a comma separated list of line numbers or ranges (e.g., 1-3). Line numbers start at 1."
              },
              "message": {
                "type": "string",
                "title": "Message",
                "description": "Specify the message to show when miss as configured occurs."
              },
              "suppresses": {
                "type": "string",
                "description": "Specify which feedback messages should be held back when this message is applicable. Specify a comma separated list of the Message IDs of those feedback messages.",
                "pattern": "\\s*[_$a-zA-Z0-9]+\\s*(,\\s*[_$a-zA-Z0-9]+\\s*)*",
                "title": "Suppressed Messages"
              }
            },
            "description": "Specify the location of the coverage miss",
            "required": [
              "lineRanges",
              "message",
              "showFor",
              "fileName"
            ],
            "title": "Feedback Messages"
          }
        }
      },
      "required": [
        "feedback",
        "showFullCoverageReport",
        "showTestFailures"
      ]
    },
    "classSelected": {
      "type": "boolean",
      "title": "Enable Class-Info Checker",
      "description": "Enable the configuration of the Class-Info Checker.",
      "documentation": "Enable the configuration of the Class-Info Checker.",
      "default": false
    },
    "classes": {
	  "type": "object",
	  "properties": {
		"items": {
		  "type": "object",
		  "title": "Class Info Collection",
		  "description": "Holds information for each expected classes.",
		  "documentation": "This holds all information about all possible classes inside the given files. Note that not only outer but also inner classes should have infos created here, if you wish to check them for properties.",
		  "required": [
			"classKeywordConfig"
		  ],
		  "properties": {
			"fullyQualifiedName": {
			  "type": "string",
			  "title": "Fully Qualified Name of the Class",
			  "default": "",
			  "description": "Package names and class name, separated by dots. If you expect the class to be in the default package, just the class name will suffice.",
			  "documentation": "This is used for matching the classes given in the solution with the provided expected answers here in the configuration. Since this name is unique, this is the preferred way of matching up the classes. Example: com.myCompany.core.functions.AddFunction"
			},
			"classKeywordConfig": {
			  "type": "object",
			  "properties": {
				"allowExactModifierMatching": {
				  "type": "boolean",
				  "title": "Allow Exact Modifier Matching",
				  "description": "Set to true, if you wish to match the chosen modifiers exactly. If not, they will only be seen as a possible choice.",
				  "default": false,
				  "documentation": "Chosen modifiers can be seen as a possible choice or an exact configuration. By setting this to **true**, all chosen modifiers(marked with yes) will be matched with exactly. Only if all chosen modifiers are present in the solution, will no feedback be generated. If **false** has been chosen, the chosen modifiers will only be seen as an option and any subset of the chosen modifiers can be seen as valid in the solution."
				},
				"publicModifier": {
				  "type": "string",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "title": "Public Modifier",
				  "description": "Set to yes, if you expect the public modifier to be present in the solution. Set to no, if you don't want to see the public modifier in the solution.",
				  "default": "don't care"
				},
				"protectedModifier": {
				  "type": "string",
				  "title": "Protected Modifier",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "description": "Set to yes, if you expect the protected modifier to be present in the solution. Set to no, if you don't want to see the protected modifier in the solution.",
				  "default": "don't care"
				},
				"privateModifier": {
				  "type": "string",
				  "title": "Private Modifier",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "description": "Set to yes, if you expect the private modifier to be present in the solution. Set to no, if you don't want to see the private modifier in the solution.",
				  "default": "don't care"
				},
				"packagePrivateModifier": {
				  "type": "string",
				  "title": "Package Private Modifier",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "description": "Set to yes, if you want to allow no modifier to be present in the solution. Set to no, if you don't want to allow no modifier in the solution.",
				  "default": "don't care",
				  "documentation": "With this option you can allow, that no modifier is present as an access modifier, indicating that the **package private** modifier can be used."
				},
				"emptyNonAccessModifier": {
				  "type": "string",
				  "title": "Empty Non Access Modifier",
				  "description": "Set to yes, if you want to allow, that no non access modifier can be used in the solution. Set to no, if you expect at least one non access modifier to be present.",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "default": "don't care"
				},
				"abstractModifier": {
				  "type": "string",
				  "title": "Abstract Modifier",
				  "description": "Set to yes, if you expect the abstract modifier to be present in the solution. Set to no, if you don't want to see the abstract modifier in the solution.",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "default": "don't care"
				},
				"staticModifier": {
				  "type": "string",
				  "title": "Static Modifier",
				  "description": "Set to yes, if you expect the static modifier to be present in the solution. Set to no, if you don't want to see the static modifier in the solution.",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "default": "don't care"
				},
				"finalModifier": {
				  "type": "string",
				  "title": "Final Modifier",
				  "description": "Set to yes, if you expect the final modifier to be present in the solution. Set to no, if you don't want to see the final modifier in the solution.",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "default": "don't care"
				},
				"classType": {
				  "type": "string",
				  "title": "Class Type",
				  "description": "Set to yes, if you want to allow the type of the class to be class. Set to no, if you do not want to allow the class type to be used.",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "default": "don't care"
				},
				"interfaceType": {
				  "type": "string",
				  "title": "Interface Type",
				  "description": "Set to yes, if you want to allow the type of the class to be an interface. Set to no, if you do not want to allow the interface type to be used.",
				  "enum": [
					"yes",
					"no",
					"don't care"
				  ],
				  "default": "don't care"
				},
				"name": {
				  "type": "string",
				  "title": "Class Name",
				  "description": "Set the expected name of the class.",
				  "default": "TestClass",
				  "documentation": "This name can be used to match up the classes given with the here expected information. If no fully qualified name has been given beforehand, the checker will try to match up the configuration with this name instead. This may not find the class, if there are multiple classes with the same name, as the name here does not have to be unique."
				}
			  },
			  "required": [
				"name"
			  ],
			  "description": "Modifiers, type and name can be set here.",
			  "title": "Class Keyword Config"
			},
			"inheritsFromConfigs": {
			  "type": "array",
			  "documentation": "All expected super classes of the current class declaration.  Format:[class/interface] [name]. ### Examples: - interface Employee - abstract class Number",
			  "items": {
				"type": "object",
				"properties": {
				  "classType": {
					"type": "string",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"description": "Set to yes, if you want to allow this inherited class to be of type class. Set to no, if you do not want to allow this inherited class to be of type class.",
					"title": "Expected Class Type",
					"default": "don't care"
				  },
				  "interfaceType": {
					"type": "string",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"description": "Set to yes, if you want to allow this inherited class to be of type interface. Set to no, if you do not want to allow this inherited class to be of type interface.",
					"title": "Expected Interface Type",
					"default": "don't care"
				  },
				  "name": {
					"type": "string",
					"title": "Class Name of Super Class",
					"description": "Set to the expected name of super class, that this class is supposed to inherit."
				  }
				},
				"required": [],
				"title": "Configuration for Superclasses "
			  },
			  "title": "All Information about Expected Super Classes",
			  "description": "Contains all expected information about the super classes, that this class inherits."
			},
			"fieldKeywordConfigs": {
			  "type": "array",
			  "items": {
				"type": "object",
				"properties": {
				  "allowExactModifierMatching": {
					"type": "boolean",
					"title": "Allow Exact Modifier Matching",
					"description": "Set to true, if you wish to match the chosen modifiers exactly. If not, they will only be seen as a possible choice.",
					"default": false,
					"documentation": "Chosen modifiers can be seen as a possible choice or an exact configuration. By setting this to **true**, all chosen modifiers(marked with yes) will be matched with exactly. Only if all chosen modifiers are present in the solution, will no feedback be generated. If **false** has been chosen, the chosen modifiers will only be seen as an option and any subset of the chosen modifiers can be seen as valid in the solution."
				  },
				  "publicModifier": {
					"type": "string",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"title": "Public Modifier",
					"description": "Set to yes, if you expect the public modifier to be present in the solution. Set to no, if you don't want to see the public modifier in the solution.",
					"default": "don't care"
				  },
				  "protectedModifier": {
					"type": "string",
					"title": "Protected Modifier",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"description": "Set to yes, if you expect the protected modifier to be present in the solution. Set to no, if you don't want to see the protected modifier in the solution.",
					"default": "don't care"
				  },
				  "privateModifier": {
					"type": "string",
					"title": "Private Modifier",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"description": "Set to yes, if you expect the private modifier to be present in the solution. Set to no, if you don't want to see the private modifier in the solution.",
					"default": "don't care"
				  },
				  "packagePrivateModifier": {
					"type": "string",
					"title": "Package Private Modifier",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"description": "Set to yes, if you want to allow no modifier to be present in the solution. Set to no, if you don't want to allow no modifier in the solution.",
					"default": "don't care",
					"documentation": "With this option you can allow, that no modifier is present as an access modifier, indicating that the **package private** modifier can be used."
				  },
				  "emptyNonAccessModifier": {
					"type": "string",
					"title": "Empty Non Access Modifier",
					"description": "Set to yes, if you want to allow, that no non access modifier can be used in the solution. Set to no, if you expect at least one non access modifier to be present.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "staticModifier": {
					"type": "string",
					"title": "Static Modifier",
					"description": "Set to yes, if you expect the static modifier to be present in the solution. Set to no, if you don't want to see the static modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "finalModifier": {
					"type": "string",
					"title": "Final Modifier",
					"description": "Set to yes, if you expect the final modifier to be present in the solution. Set to no, if you don't want to see the final modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "transientModifier": {
					"type": "string",
					"title": "Transient Modifier",
					"description": "Set to yes, if you expect the transient modifier to be present in the solution. Set to no, if you don't want to see the transient modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "volatileModifier": {
					"type": "string",
					"title": "Volatile Modifier",
					"description": "Set to yes, if you expect the volatile modifier to be present in the solution. Set to no, if you don't want to see the volatile modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "type": {
					"type": "string",
					"title": "Field Type",
					"description": "Expected type of the field as a word."
				  },
				  "name": {
					"type": "string",
					"title": "Field Name",
					"description": "Expected name of the field as a word."
				  }
				},
				"title": "Field Keywords Configuration"
			  },
			  "description": "Contains all expected information about fields.",
			  "title": "All Information about Expected Fields"
			},
			"methodKeywordConfigs": {
			  "type": "array",
			  "items": {
				"type": "object",
				"properties": {
				  "allowExactModifierMatching": {
					"type": "boolean",
					"title": "Allow Exact Modifier Matching",
					"description": "Set to true, if you wish to match the chosen modifiers exactly. If not, they will only be seen as a possible choice.",
					"default": false,
					"documentation": "Chosen modifiers can be seen as a possible choice or an exact configuration. By setting this to **true**, all chosen modifiers(marked with yes) will be matched with exactly. Only if all chosen modifiers are present in the solution, will no feedback be generated. If **false** has been chosen, the chosen modifiers will only be seen as an option and any subset of the chosen modifiers can be seen as valid in the solution."
				  },
				  "publicModifier": {
					"type": "string",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"title": "Public Modifier",
					"description": "Set to yes, if you expect the public modifier to be present in the solution. Set to no, if you don't want to see the public modifier in the solution.",
					"default": "don't care"
				  },
				  "protectedModifier": {
					"type": "string",
					"title": "Protected Modifier",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"description": "Set to yes, if you expect the protected modifier to be present in the solution. Set to no, if you don't want to see the protected modifier in the solution.",
					"default": "don't care"
				  },
				  "privateModifier": {
					"type": "string",
					"title": "Private Modifier",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"description": "Set to yes, if you expect the private modifier to be present in the solution. Set to no, if you don't want to see the private modifier in the solution.",
					"default": "don't care"
				  },
				  "packagePrivateModifier": {
					"type": "string",
					"title": "Package Private Modifier",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"description": "Set to yes, if you want to allow no modifier to be present in the solution. Set to no, if you don't want to allow no modifier in the solution.",
					"default": "don't care",
					"documentation": "With this option you can allow, that no modifier is present as an access modifier, indicating that the **package private** modifier can be used."
				  },
				  "emptyNonAccessModifier": {
					"type": "string",
					"title": "Empty Non Access Modifier",
					"description": "Set to yes, if you want to allow, that no non access modifier can be used in the solution. Set to no, if you expect at least one non access modifier to be present.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "abstractModifier": {
					"type": "string",
					"title": "Abstract Modifier",
					"description": "Set to yes, if you expect the abstract modifier to be present in the solution. Set to no, if you don't want to see the abstract modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "staticModifier": {
					"type": "string",
					"title": "Static Modifier",
					"description": "Set to yes, if you expect the static modifier to be present in the solution. Set to no, if you don't want to see the static modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "finalModifier": {
					"type": "string",
					"title": "Final Modifier",
					"description": "Set to yes, if you expect the final modifier to be present in the solution. Set to no, if you don't want to see the final modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "defaultModifier": {
					"type": "string",
					"title": "Default Modifier",
					"description": "Set to yes, if you expect the default modifier to be present in the solution. Set to no, if you don't want to see the default modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "synchronizedModifier": {
					"type": "string",
					"title": "Synchronized Modifier",
					"description": "Set to yes, if you expect the synchronized modifier to be present in the solution. Set to no, if you don't want to see the synchronized modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "nativeModifier": {
					"type": "string",
					"title": "Native Modifier",
					"description": "Set to yes, if you expect the native modifier to be present in the solution. Set to no, if you don't want to see the native modifier in the solution.",
					"enum": [
					  "yes",
					  "no",
					  "don't care"
					],
					"default": "don't care"
				  },
				  "type": {
					"type": "string",
					"title": "Method Type",
					"description": "Expected return type of the method as a word."
				  },
				  "name": {
					"type": "string",
					"title": "Method Name",
					"description": "Expected name of the method as a word."
				  }
				},
				"title": "Method Keywords Configuration"
			  },
			  "description": "Contains all expected information about methods",
			  "title": "All Information about Expected Methods"
			},
			"matchExactFieldAmount": {
			  "type": "boolean",
			  "description": "Set to true, if you wish to only allow the exact amount of fields specified here. Otherwise the solution can have more fields than here provided.",
			  "title": "Match Exact Field Amount",
			  "default": false
			},
			"matchExactMethodAmount": {
			  "type": "boolean",
			  "title": "Match Exact Method Amount",
			  "default": false,
			  "description": "Set to true, if you wish to only allow the exact amount of methods specified here. Otherwise the solution can have more methods than here provided."
			},
			"customFieldFeedback": {
			  "type": "array",
			  "items": {
				"type": "string",
				"title": "Field Feedback Message",
				"description": "Any message for field mistakes."
			  },
			  "title": "Feedback for Field Errors",
			  "description": "Include any custom feedback for field mistakes.",
			  "documentation": "You can include custom feedback for field based mistakes, such as modifier, type or name errors. All messages provided here will be included in the feedback message for the student."
			},
			"customMethodFeedback": {
			  "type": "array",
			  "items": {
				"type": "string",
				"title": "Method Feedback Message",
				"description": "Any message for method mistakes."
			  },
			  "title": "Feedback for Method Errors",
			  "description": "Include any custom feedback for method mistakes.",
			  "documentation": "You can include custom feedback for method based mistakes, such as modifier, type or name errors. All messages provided here will be included in the feedback message for the student."
			},
			"customClassFeedback": {
			  "type": "array",
			  "items": {
				"type": "string",
				"title": "Class Feedback Message",
				"description": "Any message for class mistakes."
			  },
			  "title": "Feedback for Class Errors",
			  "description": "Include any custom feedback for class mistakes.",
			  "documentation": "You can include custom feedback for class based mistakes here, such as class type or class name errors. All messages provided here will be included in the feedback message for the student."
			},
			"customInheritanceFeedback": {
			  "type": "array",
			  "items": {
				"type": "string",
				"title": "Inheritance Feedback Message",
				"description": "Any message for inheritance mistakes."
			  },
			  "title": "Feedback for Inheritance Errors",
			  "description": "Include any custom feedback for inheritance mistakes.",
			  "documentation": "You can include custom feedback for inheritance based mistakes here, such as inherited type errors or missing super class errors. All messages provided here will be included in the feedback message for the student."
			}
		  }
		}
	  },
	  "title": "Class Info Checker Configuration"
	},
    "metricsSelected": {
      "type": "boolean",
      "title": "Enable Metrics Checker",
      "description": "Enable the Configuration of the Metrics Checker.",
      "documentation": "Enable the Configuration of the Metrics Checker.",
      "default": false
    },
"metrics": {
      "type": "object",
      "title": "Metrics Check Configuration",
      "description": "The Configuration for the Metrics Checker",
      "documentation": "The Configuration for the Metrics Checker",
      "properties": {
        "includeCallsToJdk": {
          "type": "boolean",
          "title": "Include Calls To JDK",
          "description": "Specify whether calls to JDK should be included while running the metrics checker.",
          "documentation": "Specify whether calls to JDK should be included while running the metrics checker. This could be reasonable when given classes have many dependencies to classes from the JDK and therefore should not be ignored.",
          "default": false
        },
        "includeOnlyPublicClasses": {
          "type": "boolean",
          "title": "Include Only Public Classes",
          "description": "Specify whether only public classes should be included while running the metrics checker.",
          "documentation": "Specify whether only public classes should be included while running the metrics checker. This could be reasonable when students create helper classes that may not be obligatory or may not have that high of an importance to be checked.",
          "default": false
        },
        "amcThreshold": {
          "type": "object",
          "title": "Average Method Complexity",
          "description": "Configure Average Method Complexity",
          "documentation": "Configure Average Method Complexity. This metric measures the average method size for each class. Size of a method is equal to the number of java binary codes in the method.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "documentation": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "documentation": "Specify the metric's upper bound.",
              "default": 100
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "Increase your average method size, e.g. by joining multiple methods with mostly the same functionalities from over-engineering."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Decrease your average method size, e.g. by delegating functionalities to other newly created methods.",
              "default": "Decrease your average method size, e.g. by delegating functionalities to other newly created methods."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "caThreshold": {
          "type": "object",
          "title": "Afferent Coupling",
          "description": "Configure Afferent Coupling",
          "documentation": "Configure Afferent Coupling. The metric represents the number of classes that depend upon the measured class. Coupling has the same definition in context of CA as that used for calculating CBO.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "documentation": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "documentation": "Specify the metric's upper bound.",
              "default": 100
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class is used by too few other classes. Is this class even necessary? Can you implement this class's functionalities into already existing classes?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Decrease your average method size, e.g. by delegating functionalities to other newly created methods.",
              "default": "This class is used by too many other classes. Can you outsource some functionalities into already existing or new classes?"
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "camThreshold": {
          "type": "object",
          "title": "Cohesion Among Methods of Class",
          "description": "Configure Cohesion Among Methods of Class",
          "documentation": "This metric computes the relatedness among methods of a class based upon the parameter list of the methods. The metric is computed using the summation of number of different types of method parameters in every method divided by a multiplication of number of different method parameter types in whole class and number of methods. A metric value close to 1.0 is preferred. (range 0 to 1).",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "documentation": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "documentation": "Specify the metric's upper bound.",
              "default": 1
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class and their methods are or are close to being un-cohesive. Assimilate methods in your class in order to increase readability and decrease complexity at once."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Decrease your average method size, e.g. by delegating functionalities to other newly created methods.",
              "default": "This class and their methods are too cohesive. Your implemented methods are too close to being the same methods."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "cbmThreshold": {
          "type": "object",
          "title": "Coupling Between Methods",
          "description": "Configure Coupling Between Methods",
          "documentation": "Configure Coupling Between Methods. The metric measures the total number of new or redefined methods to which all the inherited methods are coupled. There is a coupling when at least one of the given in the IC metric definition conditions is held.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 5,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "The methods in this class are not or are hardly coupled, which means they have (close to) no interdependencies. Is this reasonable for your class?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "The methods in this class are coupled to high, which means too many interdependencies, coordination and information flow between them. Try to minimize these dependencies between your methods."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "cboThreshold": {
          "type": "object",
          "title": "Coupling Between Object Classes",
          "description": "Configure Coupling Between Object Classes",
          "documentation": "Configure Coupling Between Object Classes. The metric represents the number of classes coupled to a given class (efferent couplings and afferent couplings). This couplings can occur through method calls, field accesses, inheritance, method arguments, return types, and exceptions.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 5,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "The sum of all class couplings in this class is (close to) zero, which means they have (close to) no interdependencies to other classes. Is this reasonable for your class? Also, refer to afferent/efferent coupling metric."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "The sum of all class couplings in this class is too high, which means too many interdependencies, coordination and information flow between them. Try to minimize these dependencies from this class to other classes. Also, refer to afferent/efferent coupling metric."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "ccThreshold": {
          "type": "object",
          "title": "McCabe's Cyclomatic Complexity",
          "description": "Configure McCabe's Cyclomatic Complexity",
          "documentation": "Configure McCabe's Cyclomatic Complexity. The metric is equal to number of different paths in a method (function) plus one. The cyclomatic complexity is defined as follows:\n`CC` = `E` – `N` + `P` where\n- `E`: The number of edges of the graph\n- `N`: The number of nodes of the graph\n- `P`: The number of connected components\n\nCC is the only method size metric.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 1,
              "default": 1,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": true
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This method in the given class has very few different paths to take. It would be allowed to increase its complexity."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This method in the given class is too complex, too many paths are taken (ite-statements). Try to decrease the complexity by delegating functionalities into other methods or classes."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "ceThreshold": {
          "type": "object",
          "title": "Efferent Coupling",
          "description": "Configure Efferent Coupling",
          "documentation": "Configure Efferent Coupling. The metric represents the number of classes that the measured class is depended upon. Coupling has the same definition in context of Ce as that used for calculating CBO.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class is using too few other classes. Can some functionalities be implemented into other classes and be used?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class is using too many other classes. Can some functionalities be joined by other classes or even be implemented in this specific class?"
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "damThreshold": {
          "type": "object",
          "title": "Data Access Metric",
          "description": "Configure Data Access Metric",
          "documentation": "Configure Data Access Metric. This metric is the ratio of the number of private (protected) attributes to the total number of attributes declared in the class. A high value for DAM is desired (range 0 to 1).",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 1,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class contains very few private (protected) attributes compared to to the total number of attributes. Try to encapsulate your class (make fields private, only access them by methods contained in this specific class if possible)."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class contains many private (protected) attributes compared to to the total number of attributes. Encapsulation is important, but sometimes over-engineering. Is this reasonable?"
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "ditThreshold": {
          "type": "object",
          "title": "Depth Of Inheritance Tree",
          "description": "Configure Depth Of Inheritance Tree",
          "documentation": "Configure Depth Of Inheritance Tree. The metric provides a measure of the inheritance levels from the object hierarchy top for each class. In Java where all classes inherit Object the minimum value of DIT is 1.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 1,
              "default": 1,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 6,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class has very few superclasses or only one superclass (Object.java). Is inheritance a possible option?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class has many superclasses. Is this much inheritance possible over-engineering? Do certain subclasses have too similar or too few functionalities?"
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "icThreshold": {
          "type": "object",
          "title": "Inheritance Coupling",
          "description": "Configure Inheritance Coupling",
          "documentation": "Configure Inheritance Coupling. This metric provides the number of parent classes to which a given class is coupled. A class is coupled to its parent class if one of its inherited methods functionally dependent on the new or redefined methods in the class. A class is coupled to its parent class if one of the following conditions is satisfied:\n- One of its inherited methods uses an attribute that is defined in a new or redefined method.\n- One of its inherited methods calls a redefined method.\n- One of its inherited methods is called by a redefined method and uses a parameter that is defined in the redefined method.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 6,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class is coupled to few or no parent classes. Overriding parent methods could be a suitable option here."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class is coupled to many parent classes. Overriding parent methods makes sense, but is not always necessary."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "lcomThreshold": {
          "type": "object",
          "title": "Lack Of Cohesion In Methods",
          "description": "Configure Lack Of Cohesion In Methods",
          "documentation": "Configure Lack Of Cohesion In Methods. The metric counts the sets of methods in a class that are not related through the sharing of some of the class's fields. The original definition of this metric (used here) considers all pairs of a class's methods. In some of these pairs both methods access at least one common field of the class, while in other pairs the two methods to not share any common field accesses. The lack of cohesion in methods is then calculated by subtracting from the number of method pairs that don't share a field access the number of method pairs that do. Note that subsequent definitions of this metric used as a measurement basis the number of disjoint graph components of the class's methods. Others modified the definition of connectedness to include calls between the methods of the class (original definition (1994) definition by Chidamber and Kemerer).",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "The modularisation of this class is too low. Too many methods operate on different attributes."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "The modularisation of this class is quite high. You could think about the necessity if your class is very small."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "lcom3Threshold": {
          "type": "object",
          "title": "Lack Of Cohesion In Methods Henderson-Sellers version",
          "description": "Configure Henderson-Sellers Lack Of Cohesion In Methods",
          "documentation": "Configure Henderson-Sellers Lack Of Cohesion In Methods. The metric varies between 0 and 2. It Is defined as follows:\n$LCOM3=\\frac{1}{a}\\cdot\\displaystyle\\sum_{j=1} ^{a} \\mu(A_j))-m$ where\n- `m`: Number of procedures (methods) in class\n- `a`: Number of variables (attributes in class)\n- `µ(A)`: Number of methods that access a variable (attribute)\n\nThe constructors and static initializations are taking into accounts as separately methods.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 2,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "The modularisation of this class is too low. Too many methods operate on different attributes."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "The modularisation of this class is quite high. You could think about the necessity if your class is very small."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "locThreshold": {
          "type": "object",
          "title": "Lines Of Code",
          "description": "Configure Lines Of Code",
          "documentation": "Configure Lines Of Code. The metric is based on Java binary code. It is the sum of number of fields, number of methods as well as number of instructions in every method of the investigated class.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class contains very few lines of code. Is it even necessary to put these functionalities into a separate class?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class contains too many lines of code, it could be considered as a \"God Class\". Try to keep only the main functionality in this class, others should be implemented into other (new) classes."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "mfaThreshold": {
          "type": "object",
          "title": "Measure of Functional Abstraction",
          "description": "Configure Measure of Functional Abstraction",
          "documentation": "Configure Measure of Functional Abstraction. This metric is the ratio of the number of methods inherited by a class to the total number of methods accessible by the member methods of the class. The constructors and the java.lang.Object (as parent) are ignored (range 0 to 1).",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 1,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "The functional abstraction of this class ist quite low. If possible, try to let his class inherit some methods."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "The functional abstraction of this class is very high. Consider refactoring this class into an abstract class if this is not yet the case."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "moaThreshold": {
          "type": "object",
          "title": "Measure of Aggregation",
          "description": "Configure Measure of Aggregation",
          "documentation": "Configure Measure of Aggregation. This metric measures the extent of the part-whole relationship, realized by using attributes. The metric is a count of the number of class fields whose types are user defined classes.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class contains too few class fields. In order to increase class aggregation, also increase the number of fields or merge this class into another."
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class contains too many class fields. Try to inline fields or extract functionalities into other classes."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "nocThreshold": {
          "type": "object",
          "title": "Number Of Children",
          "description": "Configure Number Of Children",
          "documentation": "Configure Number Of Children. The metric simply measures the number of immediate descendants of the class.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class has very few or no immediate descendants. Would extending this class be reasonable?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class has too much immediate descendants. Consider using multiple inheritance, i.e. creating subclasses of a subclass."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "npmThreshold": {
          "type": "object",
          "title": "Number of Public Methods for a class",
          "description": "Configure Number of Public Methods for a class",
          "documentation": "Configure Number of Public Methods for a class. The metric simply counts all the methods in a class that are declared as public. It can be used to measure the size of an API provided by a package. The metric is known also as Class Interface Size (CIS).",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class uses few or no public methods. Is this intended?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class uses mostly public methods. Try to decrease their visibility to force the information hiding principle."
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "rfcThreshold": {
          "type": "object",
          "title": "Response For A Class",
          "description": "Configure Response For A Class",
          "documentation": "Configure Response For A Class. The metric measures the number of different methods that can be executed when an object of that class receives a message. Ideally, we would want to find for each method of the class, the methods that class will call, and repeat this for each called method, calculating what is called the transitive closure of the method call graph. This process can however be both expensive and quite inaccurate. A rough approximation to the response set  is calculated by simply inspecting method calls within the class method bodies. The value of RFC is the sum of number of methods called within the class method bodies and the number of class methods. This simplification was also used in the Chidamber and Kemerer's description of the metric.",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class has too few or zero (in-)directly executable methods. Is this class even necessary then?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class is able to (in-)directly execute too many methods. This is a typical smell for a god class. Does your class have one main functionality? Can some functionalities be extracted into other existing or new classes?"
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        },
        "wmcThreshold": {
          "type": "object",
          "title": "Weighted Methods Per Class",
          "description": "Configure Weighted Methods Per Class",
          "documentation": "Configure Weighted Methods Per Class. A class's weighted methods per class WMC metric is simply the sum of the complexities of its methods. As a measure of complexity we can use the cyclomatic complexity, or we can arbitrarily assign a complexity value of 1 to each method. Here, a complexity value of 1 is assigned to each method, and therefore the value of the WMC is equal to the number of methods in the class. ",
          "properties": {
            "min": {
              "type": "number",
              "title": "Lower Bound",
              "description": "Specify the metric's lower bound.",
              "minimum": 0,
              "default": 0,
              "documentation": "Specify the metric's lower bound."
            },
            "noMax": {
              "type": "boolean",
              "title": "No Upper Bound",
              "description": "Select if no upper bound should be enforced for this metric.",
              "documentation": "Select if no upper bound should be enforced for this metric.",
              "default": false
            },
            "max": {
              "type": "number",
              "title": "Upper Bound",
              "description": "Specify the metric's upper bound.",
              "default": 100,
              "documentation": "Specify the metric's upper bound."
            },
            "suggestionMin": {
              "type": "string",
              "title": "Suggestion Upper Bound",
              "description": "Specify this metric's custom suggestion for violations of min threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of min threshold.",
              "default": "This class contains too few or zero methods. Is this class even necessary then?"
            },
            "suggestionMax": {
              "type": "string",
              "title": "Suggestion Lower Bound",
              "description": "Specify this metric's custom suggestion for violations of max threshold.",
              "documentation": "Specify this metric's custom suggestion for violations of max threshold.",
              "default": "This class contains too many methods. This is a typical smell for a god class. Does your class have one main functionality? Can some functionalities be extracted into other existing or new classes?"
            }
          },
          "required": [
            "min",
            "max",
            "noMax",
            "suggestionMin",
            "suggestionMax"
          ]
        }
      },
      "required": [
        "amcThreshold",
        "caThreshold",
        "camThreshold",
        "cbmThreshold",
        "cboThreshold",
        "ccThreshold",
        "ceThreshold",
        "damThreshold",
        "ditThreshold",
        "icThreshold",
        "lcomThreshold",
        "lcom3Threshold",
        "locThreshold",
        "mfaThreshold",
        "moaThreshold",
        "nocThreshold",
        "npmThreshold",
        "rfcThreshold",
        "wmcThreshold"
      ]
    }
  },
  "required": [
    "syntax",
    "styleSelected",
    "semanticsSelected",
    "coverageSelected",
    "classSelected",
    "metricsSelected"
  ]
}
