(this["webpackJsonpqped-github-pages"]=this["webpackJsonpqped-github-pages"]||[]).push([[4],{243:function(e,t,i){"use strict";i.r(t);var n=i(13),o=i(981),s=i(621),r=i(622),a=i(0),c=i(2);t.default=function(e){var t=e.mdFile,m=e.maxWidth,d=Object(a.useState)(),l=Object(n.a)(d,2),p=l[0],u=l[1],h={img:function(e){var t=e.alt,i=e.src,n=e.title;return Object(c.jsx)("img",{alt:t,src:i,title:n,style:{maxWidth:m}})}};return Object(a.useEffect)((function(){i(898)("./".concat(t)).then((function(e){fetch(e.default).then((function(e){return e.text()})).then((function(e){return u(e)})).catch((function(e){return console.log(e)}))})).catch((function(e){return console.log(e)}))})),Object(c.jsx)(o.a,{remarkPlugins:[s.a],rehypePlugins:[r.a],components:h,children:p,transformImageUri:function(e){if(e.startsWith("http"))return e;var t=window.location.href,i=t.split(/\?|#/).shift();return"".concat(t=void 0===i?"":i).concat(e)}})}},261:function(e,t,i){"use strict";i.r(t);var n=i(92),o=i(985),s=i(346),r=i(75),a=i.n(r),c=i(264),m=i(2),d=Object(n.b)({components:{MuiFormControl:{styleOverrides:{root:{margin:"0.8em 0"}}}}});a.a.render(Object(m.jsxs)(o.a,{theme:d,children:[Object(m.jsx)(s.b,{}),Object(m.jsx)(c.default,{})]}),document.getElementById("root"))},264:function(e,t,i){"use strict";i.r(t);var n=i(16),o=i(13),s=i(0),r=i(26),a=i(147),c=i(333),m=i(213),d=i(408),l=(i(555),i(311)),p=i(982),u=i(426),h=(i(896),i(243)),f=i(421),b=i(314),y=i(316),g=i(983),x=i(2),T=Object(g.a)({container:{padding:"1em",width:"100%"},markdownContainer:{width:"90%",borderRadius:"10px",border:"1px solid gray",margin:"auto",padding:"20px"},title:{textAlign:"center",padding:"0.25em"},dataContent:{display:"flex",justifyContent:"center",borderRadius:"0.25em",backgroundColor:"#cecece",marginBottom:"1rem"},actionButton:{display:"block !important"},buttons:{display:"flex",justifyContent:"center",alignItems:"center"},demoform:{margin:"auto",padding:"1rem"}}),C=[].concat(Object(n.a)(f.materialRenderers),[{tester:y.default,renderer:b.default}]);t.default=function(){var e=T(),t=Object(s.useState)(),i=Object(o.a)(t,2),n=i[0],b=i[1],y=Object(s.useMemo)((function(){return JSON.stringify(n,null,2)}),[n]),g=Object(s.useRef)(null),w=function(e){var t=Object(s.useCallback)((function(){var t;return null===e||void 0===e||null===(t=e.current)||void 0===t?void 0:t.offsetWidth}),[e]),i=Object(s.useState)(void 0),n=Object(o.a)(i,2),r=n[0],a=n[1];return Object(s.useEffect)((function(){var i=function(){a(t())};return e.current&&a(t()),window.addEventListener("resize",i),function(){window.removeEventListener("resize",i)}}),[e,t]),r&&r>25?r-25:r}(g);return Object(x.jsxs)(s.Fragment,{children:[Object(x.jsx)("div",{className:"App",children:Object(x.jsxs)("header",{className:"App-header",children:[Object(x.jsx)("img",{src:d.default,className:"App-logo",alt:"logo"}),Object(x.jsx)("h1",{className:"App-title",children:"Welcome to the QPED-project's configurator"}),Object(x.jsx)("p",{className:"App-intro",children:"Easily configure our checkers for Quarterfall."})]})}),Object(x.jsxs)(p.a,{defaultActiveKey:"home",id:"uncontrolled-tab-example",className:"mb-3",children:[Object(x.jsx)(u.a,{eventKey:"home",title:"Home",children:Object(x.jsx)("div",{ref:g,className:e.markdownContainer,children:Object(x.jsx)(h.default,{maxWidth:w,mdFile:"qped-mass.md"})})}),Object(x.jsx)(u.a,{eventKey:"configurator",title:"O3 Configurator",children:Object(x.jsxs)(a.a,{container:!0,justifyContent:"center",spacing:2,className:e.container,children:[Object(x.jsxs)(a.a,{item:!0,xs:8,children:[Object(x.jsx)(m.a,{variant:"h4",className:e.title,children:"Configuration Editor"}),Object(x.jsx)("div",{className:e.demoform,children:Object(x.jsx)(r.JsonForms,{renderers:C,schema:l,data:n,cells:f.materialCells,onChange:function(e){e.errors;var t=e.data;return b(t)}})})]}),Object(x.jsxs)(a.a,{item:!0,xs:!0,children:[Object(x.jsx)(m.a,{variant:"h4",className:e.title,children:"Configuration Data"}),Object(x.jsx)("div",{className:e.dataContent,children:Object(x.jsx)("pre",{id:"boundData",children:y})}),Object(x.jsxs)(a.a,{container:!0,justifyContent:"center",className:e.container,spacing:2,children:[Object(x.jsx)(a.a,{item:!0,xs:!0,children:Object(x.jsx)(c.a,{className:e.actionButton,onClick:function(){navigator.clipboard.writeText(JSON.stringify(n))},color:"primary",variant:"contained",children:"Copy to clipboard"})}),Object(x.jsx)(a.a,{item:!0,xs:!0,children:Object(x.jsx)(c.a,{className:e.actionButton,onClick:function(){b({})},color:"primary",variant:"contained",children:"Clear data"})})]})]})]})}),Object(x.jsx)(u.a,{eventKey:"doku",title:"O3 Dokumentation",children:Object(x.jsx)("div",{className:e.markdownContainer,children:Object(x.jsx)(h.default,{maxWidth:w,mdFile:"mass-doku.md"})})})]})]})}},311:function(e){e.exports=JSON.parse('{"$id":"http://alucard2112.github.io/qped.github.io/schemas/mass.schema.json","$schema":"http://json-schema.org/draft-07/schema","description":"Enter the description configuration of the Marburg university Auto Assess System (MASS), part of the QPED project.","documentation":"The [Marburg university Auto Assess System (MASS)](http://qped.github.io) is part of the project [Quality-focussed Programming Education (QPED)](https://qped.eu), co-funded by the [Erasmus+-Program of the European Union](https://erasmus-plus.ec.europa.eu) (2020-1-NL01-KA203-064626).\\n\\nMASS performs checks on student solutions to programming assignents in the Java language, with respect to different aspects: syntax, style, solution approach, testing and design. Only the syntax check is mandatory, all other checks are optional. In this configuration, lectures can specify which checks that want to be performed on student solutions and configure these checks according to the requirements of their assignment.","type":"object","title":"QPED-MASS Configuration","additionalProperties":false,"properties":{"syntax":{"title":"Syntax Check Configuration","description":"Configure the properties of a Syntax Check.","documentation":"This is a long documentation of Syntax Check properties.","type":"object","additionalProperties":false,"properties":{"level":{"type":"string","enum":["BEGINNER","INTERMEDIATE","ADVANCED"],"title":"Student Level","description":"Select the level of programming experience for the target student audience."}},"required":["level"]},"style":{"type":"object","title":"Style Configuration","description":"The Configuration for Style Checker","properties":{"compLevel":{"type":"string","title":"Complexity Level","description":"Complexity Level","documentation":"**A Level for number of methods, fields, imports, method params and classes**","enum":["BEGINNER","INTERMEDIATE","ADVANCED"],"default":"BEGINNER"},"namesLevel":{"type":"string","title":"Naming Conventions Level","description":"Naming Conventions Level","documentation":"**A Level for naming conventions of methods, fields, local variables and classes. This level check also if comments for methods, Classes, and fields are required.**","enum":["BEGINNER","INTERMEDIATE","ADVANCED"],"default":"BEGINNER"},"basisLevel":{"type":"string","title":"Basic Level","description":"General level","documentation":"**controls the rules that checks the general style violation which are not naming conventions, performence or security violations.**","enum":["BEGINNER","INTERMEDIATE","ADVANCED"],"default":"BEGINNER"},"classLength":{"type":"integer","title":"Class Length","description":"The maximal Line number of a Class","documentation":"**The maximal Line number of a Class**","default":-1},"methodLength":{"type":"integer","title":"Method Length","description":"The maximal Line number of each Methods","documentation":"**The maximal Line number of each Methods**","default":-1},"cycloComplexity":{"type":"integer","title":"Method Length","description":"The maximal number of nested Statments (Complexity of the control flow)","documentation":"**The maximal number of nested Statments (Complexity of the control flow)**","default":-1},"fieldsCount":{"type":"integer","title":"Number of Class Fields ","description":"The maximal number of the Class fields","documentation":"**The maximal number of the Class fields**","default":-1},"varName":{"type":"string","title":"Variable Naming Conventions","description":"Regular expression for local Variable Naming Conventions","documentation":"**Regular expression for local Variable Naming Conventions**","default":"[a-z][a-zA-Z0-9]*"},"methodName":{"type":"string","title":"Method Naming Conventions","description":"Regular expression for Method Naming Conventions","documentation":"**Regular expression for Method Naming Conventions**","default":"[a-z][a-zA-Z0-9]*"},"className":{"type":"string","title":"Class Naming Conventions","description":"Regular expression for Class Naming Conventions","documentation":"**Regular expression for Class Naming Conventions**","default":"[A-Z][a-zA-Z0-9_]*"}}},"semantics":{"type":"array","items":{"type":"object","properties":{"filePath":{"type":"string","title":"path for target file","description":"must be fully qualified file path: src.package.another-package.class.java","documentation":"**The file of the path to be checked using this configurations**"},"methodName":{"type":"string","title":"Name of Method","description":"The name of the method to be checked using this configurations","documentation":"**The name of the method to be checked using this configurations**"},"recursionAllowed":{"type":"boolean","title":"Is Recursive Method","description":"if the method allows recursion","documentation":"**if the method allows recursion**","default":false},"whileLoop":{"type":"integer","title":"Max Number of While Loops","description":"the maximum Number of while loops in the method","documentation":"**the maximum Number of while loops in the method**","default":-1},"forLoop":{"type":"integer","title":"Max Number of For Loops","description":"the maximum Number of for loops in the method","documentation":"**the maximum Number of for loops in the method**","default":-1},"forEachLoop":{"type":"integer","title":"Max Number of ForEach Loops ","description":"the maximum Number of forEach loops in the method","documentation":"**the maximum Number of forEach loops in the method**","default":-1},"ifElseStmt":{"type":"integer","title":"Max Number of If-else Statments ","description":"the maximum Number of If-Else Statment in the method","documentation":"**the maximum Number of If-Else Statment in the method**","default":-1},"doWhileLoop":{"type":"integer","title":"Max Number of Do-While Loop ","description":"the maximum Number of Do-While loops in the method","documentation":"**the maximum Number of Do-While loops in the method**","default":-1},"returnType":{"type":"string","title":"Return Type of Method","description":"the return type of the method to check","documentation":"**the return type of the method to ckeck**"}},"required":["methodName","returnType","filePath"]},"title":"Semantic Configuration","description":"The Configuration for Semantic Checker"},"testing":{"type":"object","title":"COVERAGE CHECKER CONFIGURATION","properties":{"covSetting":{"type":"object","properties":{"feedback":{"type":"array","items":{"type":"string","pattern":"(^([a-zA-Z0-9]*):(TEST|COVERAGE)$|^([a-zA-Z0-9]+:(TEST|COVERAGE|CUSTOM):([a-zA-Z0-9]+):.*)$)"},"title":"FEEDBACK CONFIGURATION","minItems":1,"description":"Defines the used feedback.","documentation":"Defines what feedback this tool can generate. <br>\\nCustom feedback has always a higher priority then default feedback.<br>   \\n\\nPossible values: \\n\\n| Value                                              | Meaning | \\n|----------------------------------------------------|--- |  \\n| :TEST                                              | Generates Default Test Feedback for all test classes |\\n| :COVERAGE                                          | Generates Default Coverage Feedback for all classes|\\n| < class name >:TEST                                | Generates default Feedback for a test class|\\n| < class name >:COVERAGE                            | Generates default Feedback for a class|\\n| < class name >:CUSTOM:< indentifier >:< feedback > | Generates your costom Feedback for a given class and identifier (Index or Method Name)|\\n\\n<br>\\nExample: <br>\\nGenerate feedback for:\\n\\n- all test in class ExampleTest1\\n- one test in class ExampleTest2\\n- one statement in class Example\\n\\n```\\nfeedback : {\\n        \\"ExampleTest1:Test\\",\\n        \\"ExampleTest2:Test:myTest:\\",\\n        \\"Example:CUSTOM:11:Hello World\\"\\n}\\n```"},"convention":{"type":"string","enum":["JAVA","MAVEN"],"title":"PROGRAM FORMAT","description":"Defines what a class name and a test class is.","documentation":"Defines what a class name and a test class is. \\n\\n| Convention | Meaning                                                                                                             |\\n|--------|---------------------------------------------------------------------------------------------------------------------| \\n| JAVA   | Test classes end with test. <br>Full class name is the total folder path.                                           |\\n| MAVEN  | Test Classes are in the folder path test/java.<br>Full class name is the folder path after test/java ore main/java. |\\n"},"format":{"type":"string","description":"Defines how your feedback is formatted.","documentation":"Over the field *format* it\'s possible to provide a template to format and enrich your feedback\\nwith additional information.\\nThe framework velocity is used to format the created feedback.\\nFor more information visit the github page."},"excludeByTypeSet":{"type":"array","items":{"type":"string","enum":["SET","GET","PRIVATE","PROTECTED"]},"title":"EXCLUDE BY TYPE","uniqueItems":true,"description":"Excludes a method by a type.","documentation":"Excludes a method by a type."},"excludeByNameSet":{"type":"array","items":{"type":"string"},"title":"EXCLUDE BY NAME","uniqueItems":true,"description":"Excludes a class or methode by it\'s name.","documentation":"Excludes a class or methode by it\'s name."}},"required":["convention","feedback"]},"additional":{"type":"object","properties":{"id":{"type":"string","title":"FILE NAME"},"extension":{"type":"string","enum":[".zip"],"title":"FILE TYPE"},"mimetype":{"type":"string","enum":["application/zip"],"title":"TYPE"},"path":{"type":"string","title":"PATH"},"url":{"type":"string","title":"URL"}},"title":"ADDITIONAL RESOURCE","description":"","documentation":"Defines the location of a additional resource like a zip file.","required":["id","extension","mimetype","url"]}},"required":["covSetting","checkerClass"]},"class":{"type":"array","description":"Information for all classes","title":"Class Info Collection","items":{"type":"object","title":"Expected Class Infos","description":"Contains all information for present classes.","documentation":"This holds all information about all possible classes inside the given files. Note that not only outer but also inner classes should have infos created here, if you wish to check them for properties.","required":["classKeywords"],"properties":{"classKeywords":{"title":"Expected Class Keywords","type":"string","description":"Modifiers, type and name of the current class.","default":"class TestClass","documentation":"All expected keywords of the current class declaration. This only concerns the current class and follows the same pattern as the Java class declaration. Format: [access modifier] [non access modifier] [class/interface] [name].\\n### Examples:\\n- public abstract class Number\\n- interface Employee","pattern":"\\\\s*(\\\\w*)\\\\s+(\\\\w+)"},"inheritsFrom":{"title":"Expected Superclass Collection","type":"array","description":"Contains all expected superclasses.","documentation":"All expected super classes of the current class declaration.  Format:[class/interface] [name]. ### Examples: - interface Employee - abstract class Number","items":{"type":"string","title":"Expected Superclass","description":"Type and name of an inherited super class.","pattern":"\\\\s*(\\\\w*)\\\\s+(\\\\w+)"}},"fieldKeywords":{"type":"array","description":"Contains all expected keywords for present fields.","title":"Field Keywords Collection","documentation":"All expected keywords of the variable declarations. All keyword inputs should have the same format as the Java variable declarations. Format: [access modifier] [non access modifier] [type] [name] Note that anything after the name, such as initialisations, will not be considered and can be omitted. Additionally, if one wishes to allow any keyword for a particular keyword type, one can replace the keyword with a *(asterisk) to indicate that any value is allowed there. ### Examples: - private String name - private int * (indicating that the name can be any)","items":{"title":"Field Keywords","type":"string","description":"Modifiers, type and name of a field declaration.","pattern":"\\\\s*(\\\\w*)\\\\s+(\\\\w+)(;|=)?"}},"methodKeywords":{"type":"array","title":"Method Keywords Collection","description":"Contains all expected keywords for all present methods.","documentation":"All expected keywords of the method declarations. The input here follows the same format as the Java method declarations. Format: [access modifier] [non access modifier] [return type] [name]. Anything after the name, such as further parameters, will not be considered and can be omitted. Additionally, if one wishes to allow any keyword, one can replace the keyword with a *(asterisk) to indicate that any value is allowed there. ### Examples: - protected String getName - *(asterisk) String getStatus (indicating that the access modifier can be any)","items":{"title":"Method Keywords","type":"string","description":"Modifiers, type and name of a method declaration.","pattern":"\\\\s*(\\\\w*)\\\\s+(\\\\w+)\\\\(?\\\\)?"}}}}},"design":{"title":"Design Checker","description":"Checker for class design metrics","type":"object","properties":{"amcThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Average Method Complexity\\\\nThis metric measures the average method size for each class. Size of a method is equal to the number of java binary codes in the method."}},"title":"AMC","description":"Average Method Complexity","required":["min","max","documentation"]},"caThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Afferent Coupling\\\\nA class\'s afferent couplings is a measure of how many other classes use the specific class. Coupling has the same definition in context of Ca as that used for calculating CBO. "}},"title":"CA","description":"####Afferent Coupling\\\\nA class\'s afferent couplings is a measure of how many other classes use the specific class. Coupling has the same definition in context of Ca as that used for calculating CBO. ","required":["min","max","documentation"]},"camThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Cohesion Among Methods of Class\\\\nThis metric computes the relatedness among methods of a class based upon the parameter list of the methods. The metric is computed using the summation of number of different types of method parameters in every method divided by a multiplication of number of different method parameter types in whole class and number of methods. A metric value close to 1.0 is preferred. (Range 0 to 1).\\n"}},"title":"CAM","description":"Cohesion Among Methods of Class","required":["min","max","documentation"]},"cbmThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Coupling Between Methods\\\\nThe metric measure the total number of new/redefined methods to which all the inherited methods are coupled. There is a coupling when one of the given in the IC metric definition conditions holds."}},"title":"CBM","description":"Coupling Between Methods","required":["min","max","documentation"]},"cboThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Coupling between object classes\\\\nThe coupling between object classes (CBO) metric represents the number of classes coupled to a given class (efferent couplings and afferent couplings). This coupling can occur through method calls, field accesses, inheritance, arguments, return types, and exceptions."}},"title":"CBO","description":"Coupling Between Object Classes","required":["min","max","documentation"]},"ccThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####The McCabe\'s cyclomatic complexity\\\\nIt is equal to number of different paths in a method (function) plus one. The cyclomatic complexity is defined as:\\\\nCC = E - N + P\\\\nwhere\\\\nE - the number of edges of the graph\\\\nN - the number of nodes of the graph\\\\nP - the number of connected components "}},"title":"CC","description":"McCabe\'s Cyclomatic Complexity","required":["min","max","documentation"]},"ceThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Efferent coupling\\\\nA class\'s efferent couplings is a measure of how many other classes is used by the specific class. Coupling has the same definition in context of Ce as that used for calculating CBO.\\n"}},"title":"CE","description":"Efferent Coupling","required":["min","max","documentation"]},"damThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Data Access Metric\\\\nThis metric is the ratio of the number of private (protected) attributes to the total number of attributes declared in the class. A high value for DAM is desired. (Range 0 to 1)"}},"title":"DAM","description":"Data Access Metric","required":["min","max","documentation"]},"ditThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Depth of Inheritance Tree\\\\nThe depth of inheritance tree (DIT) metric provides for each class a measure of the inheritance levels from the object hierarchy top. In Java where all classes inherit Object the minimum value of DIT is 1."}},"title":"DIT","description":"Depth Of Inheritance Tree","required":["min","max","documentation"]},"icThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Inheritance Coupling\\\\nThis metric provides the number of parent classes to which a given class is coupled. A class is coupled to its parent class if one of its inherited methods functionally dependent on the new or redefined methods in the class. A class is coupled to its parent class if one of the following conditions is satisfied:\\\\n-One of its inherited methods uses a variable (or data member) that is defined in a new/redefined method.\\\\nOne of its inherited methods calls a redefined method.\\\\n-One of its inherited methods is called by a redefined method and uses a parameter that is defined in the redefined method.\\n"}},"title":"IC","description":"Inheritance Coupling","required":["min","max","documentation"]},"lcomThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Lack of cohesion in methods\\\\nA class\'s lack of cohesion in methods (LCOM) metric counts the sets of methods in a class that are not related through the sharing of some of the class\'s fields. The original definition of this metric (which is the one used in ckjm) considers all pairs of a class\'s methods. In some of these pairs both methods access at least one common field of the class, while in other pairs the two methods to not share any common field accesses. The lack of cohesion in methods is then calculated by subtracting from the number of method pairs that don\'t share a field access the number of method pairs that do. Note that subsequent definitions of this metric used as a measurement basis the number of disjoint graph components of the class\'s methods. Others modified the definition of connectedness to include calls between the methods of the class (original definition (1994) definition by Chidamber and Kemerer)."}},"title":"LCOM","description":"Lack Of Cohesion In Methods","required":["min","max","documentation"]},"lcom3Threshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Lack of cohesion in methods.\\\\nLCOM3 varies between 0 and 2.\\\\nm - number of procedures (methods) in class\\\\na - number of variables (attributes in class)\\\\n\xb5(A) - number of methods that access a variable (attribute)\\\\nThe constructors and static initializations are taking into accounts as separately methods."}},"title":"LCOM3","description":"Lack Of Cohesion In Methods Henderson-Sellers version","required":["min","max","documentation"]},"locThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Lines of Code.\\\\nThe lines are counted from java binary code and it is the sum of number of fields, number of methods and number of instructions in every method of given class.\\n"}},"title":"LOC","description":"Lines Of Code","required":["min","max","documentation"]},"mfaThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Measure of Functional Abstraction\\\\nThis metric is the ratio of the number of methods inherited by a class to the total number of methods accessible by member methods of the class. The constructors and the java.lang.Object (as parent) are ignored. (Range 0 to 1)\\n"}},"title":"MFA","description":"Measure of Functional Abstraction","required":["min","max","documentation"]},"moaThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Measure of Aggregation\\\\nThis metric measures the extent of the part-whole relationship, realized by using attributes. The metric is a count of the number of data declarations (class fields) whose types are user defined classes.\\n"}},"title":"MOA","description":"Measure of Aggregation","required":["min","max","documentation"]},"nocThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Number of Children\\\\nA class\'s number of children (NOC) metric simply measures the number of immediate descendants of the class.\\n"}},"title":"NOC","description":"Number Of Children","required":["min","max","documentation"]},"npmThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Number of Public Methods\\\\nThe NPM metric simply counts all the methods in a class that are declared as public. It can be used to measure the size of an API provided by a package.\\n"}},"title":"NPM","description":"Number of Public Methods for a class","required":["min","max","documentation"]},"rfcThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Response for a Class\\\\nThe metric called the response for a class (RFC) measures the number of different methods that can be executed when an object of that class receives a message (when a method is invoked for that object). Ideally, we would want to find for each method of the class, the methods that class will call, and repeat this for each called method, calculating what is called the transitive closure of the method\'s call graph. This process can however be both expensive and quite inaccurate. Here, a rough approximation to the response set is calculated by simply inspecting method calls within the class\'s method bodies. The value of RFC is the sum of number of methods called within the class\'s method bodies and the number of class\'s methods. This simplification was also used in the 1994 Chidamber and Kemerer description of the metrics.\\n"}},"title":"RFC","description":"Response For A Class","required":["min","max","documentation"]},"wmcThreshold":{"type":"object","properties":{"metricname":{"type":"string","description":"The threshold\'s corresponding metric.","title":"Metric\'s name"},"min":{"type":"number","description":"The metric\'s lower bound","minimum":0,"title":"lower bound"},"max":{"type":"number","description":"The metric\'s upper bound.","minimum":0,"title":"upper bound"},"documentation":{"type":"string","description":"####Weighted methods per class\\\\nA class\'s weighted methods per class WMC metric is simply the sum of the complexities of its methods. As a measure of complexity we can use the cyclomatic complexity, or we can abritrarily assign a complexity value of 1 to each method. The ckjm program assigns a complexity value of 1 to each method, and therefore the value of the WMC is equal to the number of methods in the class."}},"title":"WMC","description":"Weighted methods per class","required":["min","max","documentation"]},"classTypeName":{"type":"object","properties":{"documentation":{"type":"string","description":"####Class Type Name\\\\nWith this setting, it can be defined, what name a class should have, e.g. \\"class:TestClassName\\"."}}},"inheritsFrom":{"type":"object","properties":{"keywords":{"type":"array","items":{"type":"string"}},"documentation":{"type":"string","description":"####Inherits From\\\\nWith this setting, it can be defined, from which classes or interfaces a given class must inherit. e.g. [\\"interface:Comparable\\", \\"class:ExampleAbstractClass\\"],"}}},"fieldKeywords":{"type":"object","properties":{"keywords":{"type":"array","items":{"type":"string"}},"documentation":{"type":"string","description":"####Field Keywords\\\\Determines the classes field keywords that must be used, e.g.: \\"fieldKeywords:[\\"private String name\\", \\"private String year\\"]."}}},"methodKeywords":{"type":"object","properties":{"keywords":{"type":"array","items":{"type":"string"}},"documentation":{"type":"string","description":"####Method Keywords\\\\Determines the classes method keywords that must be used, e.g.: \\"methodKeywords:[\\"public int compareTo\\", \\"protected boolean remove\\"]."}}}},"required":[]}},"required":["syntax"]}')},314:function(e,t,i){"use strict";i.r(t);var n=i(26),o=i(315),s=i(2);t.default=Object(n.withJsonFormsControlProps)((function(e){var t=e.data,i=e.handleChange,n=e.path;return Object(s.jsx)(o.Rating,{value:t,updateValue:function(e){return i(n,e)}})}))},315:function(e,t,i){"use strict";i.r(t),i.d(t,"Rating",(function(){return a}));var n=i(13),o=i(0),s=i(414),r=i(2),a=function(e){var t=e.id,i=e.value,a=e.updateValue,c=Object(o.useState)(null),m=Object(n.a)(c,2),d=m[0],l=m[1];return Object(r.jsxs)("div",{id:"#/properties/rating",className:"rating",children:[Object(r.jsx)(s.a,{shrink:!0,style:{marginTop:"0.8em"},children:"Rating"}),Object(r.jsx)("div",{style:{cursor:"pointer",fontSize:"18px"},children:[0,1,2,3,4].map((function(e){var n=null!==d&&void 0!==d?d:i;return Object(r.jsx)("span",{onMouseOver:function(){return l(e+1)},onMouseOut:function(){return l(null)},onClick:function(){return a(e+1)},children:e<n?"\u2605":"\u2606"},"".concat(t,"_").concat(e))}))})]})}},316:function(e,t,i){"use strict";i.r(t);var n=i(22);t.default=Object(n.rankWith)(3,Object(n.scopeEndsWith)("rating"))},408:function(e,t,i){"use strict";i.r(t),t.default=i.p+"static/media/logo.93c1a760.png"},555:function(e,t,i){},898:function(e,t,i){var n={"./":[261,9],"./App":[264,9],"./App.css":[555,7],"./App.test":[629,9,0],"./App.test.tsx":[629,9,0],"./App.tsx":[264,9],"./Markdown":[243,9],"./Markdown.tsx":[243,9],"./Rating":[315,9],"./Rating.tsx":[315,9],"./RatingControl":[314,9],"./RatingControl.tsx":[314,9],"./doc2desc.sh":[986,9,7],"./index":[261,9],"./index.tsx":[261,9],"./logo.png":[408,9],"./mass-docgen-conf.yaml":[987,9,8],"./mass-doku.md":[988,9,9],"./mass.schema":[311,3],"./mass.schema.json":[311,3],"./qped-mass.md":[989,9,10],"./ratingControlTester":[316,9],"./ratingControlTester.ts":[316,9],"./react-app-env.d":[630,7,1],"./react-app-env.d.ts":[630,7,1],"./schema":[631,3,2],"./schema.json":[631,3,2],"./uischema":[632,3,3],"./uischema.json":[632,3,3]};function o(e){if(!i.o(n,e))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=n[e],o=t[0];return Promise.all(t.slice(2).map(i.e)).then((function(){return i.t(o,t[1])}))}o.keys=function(){return Object.keys(n)},o.id=898,e.exports=o}},[[261,5,6]]]);
//# sourceMappingURL=main.ae68078f.chunk.js.map