(this["webpackJsonpqped-github-pages"]=this["webpackJsonpqped-github-pages"]||[]).push([[2],{100:function(e,t,o){"use strict";o.r(t);var i=o(13),n=o(935),r=o(588),s=o(589),a=o(0),c=o(2);t.default=function(e){var t=e.mdFile,d=e.maxWidth,l=e.linkToPage,u=Object(a.useState)(),m=Object(i.a)(u,2),p=m[0],h=m[1],f={img:function(e){var t=e.alt,o=e.src,i=e.title;return Object(c.jsx)("img",{alt:t,src:o,title:i,style:{maxWidth:d}})}},b=function(e){if(e.startsWith("http"))return e;var t=window.location.href,o=t.split(/\?|#/).shift();return(t=void 0===o?"":o).endsWith("/")?"".concat(t).concat(e):(t.endsWith("html")&&(t=t.slice(0,t.lastIndexOf("/"))),e.startsWith("#")?"".concat(t,"/").concat(l).concat(e):"".concat(t,"/").concat(e))};return Object(a.useEffect)((function(){o(855)("./".concat(t)).then((function(e){fetch(e.default).then((function(e){return e.text()})).then((function(e){return h(e)})).catch((function(e){return console.log(e)}))})).catch((function(e){return console.log(e)}));var e=new URL(window.location.href).hash.substring(1);console.log(e);var i=document.getElementById(e);null!=i&&i.scrollIntoView()})),Object(c.jsx)(n.a,{remarkPlugins:[r.a],rehypePlugins:[s.a],components:f,children:p,transformImageUri:function(e){return b(e)},transformLinkUri:function(e){return b(e)}})}},236:function(e,t,o){"use strict";o.r(t);var i=o(90),n=o(938),r=o(323),s=o(75),a=o.n(s),c=o(241),d=o(2),l=Object(i.b)({components:{MuiFormControl:{styleOverrides:{root:{margin:"0.8em 0"}}}}});a.a.render(Object(d.jsxs)(n.a,{theme:l,children:[Object(d.jsx)(r.b,{}),Object(d.jsx)(c.default,{})]}),document.getElementById("root"))},241:function(e,t,o){"use strict";o.r(t);var i=o(15),n=o(13),r=o(0),s=o(24),a=o(19),c=o(138),d=o(310),l=o(228),u=o(387),m=(o(529),o(287)),p=o(288),h=o(596),f=o(102),b=(o(853),o(100)),y=o(399),g=o(291),x=o(293),S=o(936),C=o(2),v=Object(S.a)({container:{padding:"1em",width:"100%"},markdownContainer:{width:"90%",borderRadius:"10px",border:"1px solid gray",margin:"auto",padding:"20px"},title:{textAlign:"center",padding:"0.25em"},dataContent:{display:"flex",justifyContent:"center",borderRadius:"0.25em",backgroundColor:"#cecece",marginBottom:"1rem"},actionButton:{display:"block !important"},buttons:{display:"flex",justifyContent:"center",alignItems:"center"},demoform:{margin:"auto",padding:"1rem"}}),w={styleSelected:!1,semanticsSelected:!1,coverageSelected:!1,classSelected:!1,metricsSelected:!1,syntax:{level:"BEGINNER"}},j=[].concat(Object(i.a)(y.materialRenderers),[{tester:x.default,renderer:g.default}]),k=Object(a.createAjv)({useDefaults:!0});t.default=function(){var e=v(),t=Object(r.useState)(w),o=Object(n.a)(t,2),i=o[0],a=o[1],g=Object(r.useState)("home"),x=Object(n.a)(g,2),S=x[0],T=x[1],O=Object(r.useState)("syntax"),E=Object(n.a)(O,2),M=E[0],N=E[1],A=Object(r.useMemo)((function(){return JSON.stringify(i,null,2)}),[i]),B=Object(r.useRef)(null),q=function(e){var t=Object(r.useCallback)((function(){var t;return null===e||void 0===e||null===(t=e.current)||void 0===t?void 0:t.offsetWidth}),[e]),o=Object(r.useState)(void 0),i=Object(n.a)(o,2),s=i[0],a=i[1];return Object(r.useEffect)((function(){var o=t();o=void 0===o?20:o-20;var i=function(){a(o)};return e.current&&a(o),window.addEventListener("resize",i),function(){window.removeEventListener("resize",i)}}),[e,t]),s&&s>25?s-25:s}(B),I="home",L="syntax";return Object(r.useEffect)((function(){var e=new URLSearchParams(window.location.search),t=e.get("tab"),o=e.get("tut");null===t&&(t=I),null===o&&(o=L),T(t),N(o)}),[]),Object(C.jsxs)(r.Fragment,{children:[Object(C.jsx)("div",{className:"App",children:Object(C.jsxs)("header",{className:"App-header",children:[Object(C.jsx)("img",{src:u.default,className:"App-logo",alt:"logo"}),Object(C.jsx)("h1",{className:"App-title",children:"Welcome to the QPED-project's configurator"}),Object(C.jsx)("p",{className:"App-intro",children:"Easily configure our checkers for Quarterfall."})]})}),Object(C.jsxs)(h.a,{defaultActiveKey:I,id:"uncontrolled-tab-example",className:"mb-3",activeKey:S,onSelect:function(e){return T(e)},children:[Object(C.jsx)(f.a,{eventKey:I,title:"Home",children:Object(C.jsx)("div",{ref:B,className:e.markdownContainer,children:Object(C.jsx)(b.default,{maxWidth:q,mdFile:"qped-mass.md"})})}),Object(C.jsx)(f.a,{eventKey:"config",title:"MASS Configurator",children:Object(C.jsxs)(c.a,{container:!0,justifyContent:"center",spacing:2,className:e.container,children:[Object(C.jsxs)(c.a,{item:!0,xs:8,children:[Object(C.jsx)(l.a,{variant:"h4",className:e.title,children:"Configuration Editor"}),Object(C.jsx)("div",{className:e.demoform,children:Object(C.jsx)(s.JsonForms,{renderers:j,schema:m,uischema:p,data:i,cells:y.materialCells,onChange:function(e){e.errors;var t=e.data;return a(t)},ajv:k})})]}),Object(C.jsxs)(c.a,{item:!0,xs:!0,children:[Object(C.jsx)(l.a,{variant:"h4",className:e.title,children:"Configuration Data"}),Object(C.jsx)("div",{className:e.dataContent,children:Object(C.jsx)("pre",{id:"boundData",children:A})}),Object(C.jsxs)(c.a,{container:!0,justifyContent:"center",className:e.container,spacing:2,children:[Object(C.jsx)(c.a,{item:!0,xs:!0,children:Object(C.jsx)(d.a,{className:e.actionButton,onClick:function(){navigator.clipboard.writeText(JSON.stringify(i))},color:"primary",variant:"contained",children:"Copy to clipboard"})}),Object(C.jsx)(c.a,{item:!0,xs:!0,children:Object(C.jsx)(d.a,{className:e.actionButton,onClick:function(){a(w)},color:"primary",variant:"contained",children:"Reset data"})})]})]})]})}),Object(C.jsx)(f.a,{eventKey:"doku",title:"MASS Documentation",children:Object(C.jsx)("div",{className:e.markdownContainer,children:Object(C.jsx)(b.default,{maxWidth:q,mdFile:"mass-doku.md",linkToPage:"index.html?tab=doku"})})}),Object(C.jsx)(f.a,{eventKey:"tuts",title:"MASS Tutorials",children:Object(C.jsxs)(h.a,{defaultActiveKey:L,id:"uncontrolled-tab-example",className:"mb-3",activeKey:M,onSelect:function(e){return N(e)},children:[Object(C.jsx)(f.a,{eventKey:L,title:"Syntax Checker",children:Object(C.jsx)("div",{className:e.markdownContainer,children:"WIP"})}),Object(C.jsx)(f.a,{eventKey:"style",title:"Style Checker",children:Object(C.jsx)("div",{className:e.markdownContainer,children:Object(C.jsx)(b.default,{maxWidth:q,mdFile:"tutorials/qped-style.md",linkToPage:"index.html?tab=tuts&tut=style"})})}),Object(C.jsx)(f.a,{eventKey:"semantic",title:"Solution Approach Checker",children:Object(C.jsx)("div",{className:e.markdownContainer,children:Object(C.jsx)(b.default,{maxWidth:q,mdFile:"tutorials/qped-semantics.md",linkToPage:"index.html?tab=tuts&tut=semantics"})})}),Object(C.jsx)(f.a,{eventKey:"coverage",title:"Test Coverage Checker",children:Object(C.jsx)("div",{className:e.markdownContainer,children:Object(C.jsx)(b.default,{maxWidth:q,mdFile:"tutorials/qped-coverage.md",linkToPage:"index.html?tab=tuts&tut=coverage"})})}),Object(C.jsx)(f.a,{eventKey:"class",title:"Class Checker",children:Object(C.jsx)("div",{className:e.markdownContainer,children:Object(C.jsx)(b.default,{maxWidth:q,mdFile:"tutorials/qped-class.md",linkToPage:"index.html?tab=tuts&tut=class"})})}),Object(C.jsx)(f.a,{eventKey:"design",title:"Metrics Checker",children:Object(C.jsx)("div",{className:e.markdownContainer,children:Object(C.jsx)(b.default,{maxWidth:q,mdFile:"tutorials/qped-design.md",linkToPage:"index.html?tab=tuts&tut=design"})})})]})})]})]})}},287:function(e){e.exports=JSON.parse('{"$id":"http://alucard2112.github.io/qped.github.io/schemas/mass.schema.json","$schema":"http://json-schema.org/draft-07/schema","description":"Enter the description configuration of the Marburg university Auto Assess System (MASS), part of the QPED project.","documentation":"The [Marburg university Auto Assess System (MASS)](http://qped.github.io) is part of the project [Quality-focussed Programming Education (QPED)](https://qped.eu), co-funded by the [Erasmus+-Program of the European Union](https://erasmus-plus.ec.europa.eu) (2020-1-NL01-KA203-064626).\\n\\nMASS performs checks on student solutions to programming assignents in the Java language, with respect to different aspects: syntax, style, solution approach, testing and design. Only the syntax check is mandatory, all other checks are optional. In this configuration, lectures can specify which checks that want to be performed on student solutions and configure these checks according to the requirements of their assignment.","type":"object","title":"QPED-MASS Configuration","additionalProperties":false,"properties":{"syntax":{"type":"object","title":"Syntax Check Configuration","description":"Configure for the Syntax Checker.","documentation":"Configure for the Syntax Checker.","additionalProperties":false,"properties":{"level":{"type":"string","title":"Student Level","description":"Select the level of programming experience for the target student audience.","documentation":"Select the level of programming experience for the target student audience. BEGINNER for programming beginner. ADVANCED for programmer with experience.","enum":["BEGINNER","ADVANCED"],"default":"BEGINNER"}},"required":["level"]},"styleSelected":{"type":"boolean","title":"Enable Style Checker","description":"Enable the configuration of the Style Checker.","documentation":"Enable the configuration of the Style Checker.","default":false},"style":{"type":"object","title":"Style Check Configuration","description":"Configure the Style Checker.","documentation":"Configure the Style Checker.","properties":{"basisLevel":{"type":"string","title":"Naming Conventions Level","description":"Select the level of programming experience for the target student audience.","documentation":"Select the level of programming experience for the target student audience.\\\\n\\\\nChecks for observance of naming conventions for methods, fields, local variables and classes, and whether required  comments for methods, classes, and fields are present.","enum":["BEGINNER","INTERMEDIATE","ADVANCED"],"default":"BEGINNER"},"complexityLevel":{"type":"string","title":"Complexity Level","description":"Select the level of programming experience for the target student audience.","documentation":"Select the level of programming experience for the target student audience.\\\\n\\\\nThe complexity refers to the number of methods, fields, imports, method parameters and classes.","enum":["BEGINNER","INTERMEDIATE","ADVANCED"],"default":"BEGINNER"},"namesLevel":{"type":"string","title":"Naming Conventions Level","description":"Select the level of programming experience for the target student audience.","documentation":"Select the level of programming experience for the target student audience.\\\\n\\\\nChecks for observance of naming conventions for methods, fields, local variables and classes, and whether required  comments for methods, classes, and fields are present.","enum":["BEGINNER","INTERMEDIATE","ADVANCED"],"default":"BEGINNER"},"classLength":{"type":"integer","title":"Class Length","description":"Specify the maximum amount of lines per class (-1 for no threshold).","documentation":"Specify the maximum amount of lines per class (-1 for no threshold).","default":-1},"methodLength":{"type":"integer","title":"Method Length","description":"Specify the maximum amount of lines per method (-1 for no threshold).","documentation":"Specify the maximum amount of lines per method (-1 for no threshold).","default":-1},"cyclomaticComplexity":{"type":"integer","title":"Cyclomatic Complexity","description":"Specify the maximum cyclomatic complexity (-1 for no threshold).","documentation":"Specify the maximum cyclomatic complexity (-1 for no threshold).","default":-1},"fieldsCount":{"type":"integer","title":"Number of Fields per Class","description":"Specify the maximum number of fields per class (-1 for no threshold).","documentation":"Specify the maximum number of fields per class (-1 for no threshold).","default":-1},"variableNamePattern":{"type":"string","format":"regex","title":"Variable Naming Conventions","description":"Specify a regular expression that variale names must match.","documentation":"Specify a regular expression that variale names must match.","default":"[a-z][a-zA-Z0-9]*"},"methodNamePattern":{"type":"string","format":"regex","title":"Method Naming Conventions","description":"Specify a regular expression that method names must match.","documentation":"Specify a regular expression that method names must match.","default":"[a-z][a-zA-Z0-9]*"},"classNamePattern":{"type":"string","format":"regex","title":"Class Naming Conventions","description":"Specify a regular expression that class names must match.","documentation":"Specify a regular expression that class names must match.","default":"[A-Z][a-zA-Z0-9_]*"}}},"semanticsSelected":{"type":"boolean","title":"Enable Solution Approach Checker","description":"Enable the configuration of the Solution Approach Checker.","documentation":"Enable the configuration of the Solution Approach Checker.","default":false},"semantic":{"type":"object","title":"Semantic Check Configuration","description":"Configure for the Semantic Checker.","documentation":"Configure for the Semantic Checker.","additionalProperties":false,"properties":{"semantics":{"type":"array","title":"Solution Approach Check Configuration","description":"Configure the Solution Approach Checker (Solution Approach).","documentation":"Configure the Solution Approach Checker (Solution Approach).\\\\n\\\\nThis checker can give feedback on whether requirements for the solution approach (e.g., usage of loops or recursion) are met.","items":{"type":"object","title":"Requirements per Method","description":"Specify which methods have requirements on the solution approach and which requirements that are. ","documentation":"Specify which methods have requirements on the solution approach and which requirements that are. ","properties":{"filePath":{"type":"string","title":"File Path","description":"Specify the file path. The file path is fully qualified path for the file from source root.","documentation":"Specify the file path. The file path is fully qualified path for the file from source root."},"methodName":{"type":"string","title":"Method Name","description":"Specify the method name for which the constraints are checked.","documentation":"Specify the method name for which the constraints are checked."},"returnType":{"type":"string","title":"Method Return Type","description":"Specify the expected return type of the method for which the constraints are checked, e.g., void, int,...","documentation":"Specify the expected return type of the method for which the constraints are checked, e.g., void, int,..."},"recursive":{"type":"boolean","title":"Recursive Method","description":"Specify whether this method should be recursive.","documentation":"Specify whether this method should be recursive.","default":false},"whileLoop":{"type":"integer","title":"Number of While Loops","description":"Specify the maximum number of while loops allowed in this method (-1 for no threshold).","documentation":"Specify the maximum number of while loops allowed in this method (-1 for no threshold).","default":-1},"forLoop":{"type":"integer","title":"Number of For Loops","description":"Specify the maximum number of for loops (not counting forEach loops) allowed in this method (-1 for no threshold).","documentation":"Specify the maximum number of for loops (not counting forEach loops) allowed in this method (-1 for no threshold).","default":-1},"forEachLoop":{"type":"integer","title":"Number of ForEach Loops","description":"Specify the maximum number of forEach loops allowed in this method (-1 for no threshold).","documentation":"Specify the maximum number of forEach loops allowed in this method (-1 for no threshold).","default":-1},"doWhileLoop":{"type":"integer","title":"Number of Do-While Loops","description":"Specify the maximum number of do-while loops allowed in this method (-1 for no threshold).","documentation":"Specify the maximum number of do-while loops allowed in this method (-1 for no threshold).","default":-1},"ifElseStmt":{"type":"integer","title":"Number of If Statments","description":"Specify the maximum number of if statements allowed in this method (-1 for no threshold).","documentation":"Specify the maximum number of if statements allowed in this method (-1 for no threshold).","default":-1}},"required":["methodName","filePath"]}}}},"coverageSelected":{"type":"boolean","title":"Enable Test Coverage Checker","description":"Enable the configuration of the Test Coverage Checker.","documentation":"Enable the configuration of the Test Coverage Checker.","default":false},"coverage":{"type":"object","title":"Test Coverage Check Configuration","description":"Configure the Test Coverage Checker.","documentation":"Configure the Test Coverage Checker.","properties":{"excludeByTypeSet":{"type":"array","title":"Exclude by Type","description":"Specify types of methods to be excluded from the coverage analysis.","documentation":"Specify types of methods to be excluded from the coverage analysis.","items":{"type":"string","enum":["SET","GET","PRIVATE","PROTECTED"]},"uniqueItems":true},"excludeByNameSet":{"type":"array","title":"Exclude by Name","description":"Specify names of classes or methods to be excluded from the coverage analysis.","documentation":"Specify names of classes or methods to be excluded from the coverage analysis.","items":{"type":"string"},"uniqueItems":true},"privateImplementation":{"type":"string","format":"uri","title":"Private Base Implementation","description":"Specify the URL of the ZIP-file containing the private implementation.","documentation":"The private implementation must be provided as a Zip-file. This will be extracted and all contained files will be copied into folder containing the code submitted by a student and possible overwrite parts of their implementation."},"feedback":{"type":"array","title":"Feedback Configuration","description":"Specify the feedback messages per coverage miss.","documentation":"Specify the feedback messages per coverage miss.","minItems":1,"items":{"type":"string","title":"Location of Coverage Miss","description":"Specify the location of the coverage miss","documentation":"Specify the feedback messages per coverage miss.\\n\\nCustom feedback has always a higher priority than default feedback. Possible values: \\n\\n| Value                                              | Meaning | \\n|----------------------------------------------------|--- |  \\n| :TEST                                              | Generates Default Test Feedback for all test classes |\\n| :COVERAGE                                          | Generates Default Coverage Feedback for all classes|\\n| < class name >:TEST                                | Generates default Feedback for a test class|\\n| < class name >:COVERAGE                            | Generates default Feedback for a class|\\n| < class name >:CUSTOM:< indentifier >:< feedback > | Generates your custom Feedback for a given class and identifier (Index or Method Name)|\\n\\nExamples:\\n\\n- Generate default feedback for all test in class ExampleTest1: ```ExampleTest1:TEST```\\n- Generate default feedback for one test in class ExampleTest2: ```ExampleTest2:TEST:myTest:```\\n- Generate custom feedback for one statement in class Example ```Example:CUSTOM:11:You missed something important in your test, did you fully read the assignment?```","pattern":"(^([a-zA-Z0-9]*):(TEST|COVERAGE)$|^([a-zA-Z0-9]+:(TEST|COVERAGE|CUSTOM):([a-zA-Z0-9]+):.*)$)"}},"convention":{"type":"string","title":"Program Format","description":"Specify whether the student solution follows plain Java or Maven conventions for locations of base and test classes.","documentation":"Specify whether the student solution follows plain Java or Maven conventions for locations of base and test classes.\\n\\n| Convention | Meaning |\\n|---|--- | \\n| JAVA   | Test classes end with test.<br>Full class name is the total folder path.                                           |\\n| MAVEN  | Test Classes are in the folder path test/java.<br>Full class name is the folder path after test/java ore main/java. |\\n","enum":["JAVA","MAVEN"],"default":"JAVA"},"format":{"type":"string","title":"Feedback Format","description":"Specify a Velocity template.","documentation":"Specify a Velocity template.\\n\\nIt is possible to provide a template to format and enrich your feedback\\nwith additional information.\\nThe framework velocity is used to format the created feedback.\\nFor more information visit the [Coverage Checker\'s github page](https://github.com/Alucard2112/QPED-O3/blob/master/src/main/java/eu/qped/java/checkers/coverage/doc.md)."}},"required":["convention","feedback"]},"classSelected":{"type":"boolean","title":"Enable Class-Info Checker","description":"Enable the configuration of the Class-Info Checker.","documentation":"Enable the configuration of the Class-Info Checker.","default":false},"class":{"type":"array","title":"Class-Info Check Configuration ","description":"Configure the Class-Info Checker","documentation":"Configure the Class-Info Checker","items":{"type":"object","title":"Expected Class-Infos","description":"Specify requirements for all properties such as modifiers.","documentation":"Specify requirements for all properties such as modifiers.\\n\\nThis holds all information about all possible classes inside the given files. Note that not only outer but also inner classes should have infos created here, if you wish to check them for properties.","properties":{"classKeywords":{"type":"string","pattern":"\\\\s*(\\\\w*)\\\\s+(\\\\w+)","title":"Expected Class Keywords","description":"Modifiers, type and name of the current class.","documentation":"All expected keywords of the current class declaration. This only concerns the current class and follows the same pattern as the Java class declaration. Format: [access modifier] [non access modifier] [class/interface] [name].\\n\\n### Examples:\\n\\n- ```public abstract class Number```\\n- ```interface Employee```","default":"class TestClass"},"inheritsFrom":{"type":"array","title":"Expected Superclass Collection","description":"Contains all expected superclasses.","documentation":"All expected super classes of the current class declaration. Format:[class/interface] [name].\\n\\n### Examples:\\n\\n- ```interface Employee```\\n- ```abstract class Number```","items":{"type":"string","pattern":"\\\\s*(\\\\w*)\\\\s+(\\\\w+)","title":"Expected Superclass","description":"Type and name of an inherited super class.","documentation":"Type and name of an inherited super class."}},"fieldKeywords":{"type":"array","title":"Field Keywords Collection","description":"Contains all expected keywords for present fields.","documentation":"All expected keywords of the variable declarations. All keyword inputs should have the same format as the Java variable declarations. Format: [access modifier] [non access modifier] [type] [name] Note that anything after the name, such as initialisations, will not be considered and can be omitted. Additionally, if one wishes to allow any keyword for a particular keyword type, one can replace the keyword with a *(asterisk) to indicate that any value is allowed there. ### Examples: - private String name - private int * (indicating that the name can be any)","items":{"type":"string","pattern":"\\\\s*(\\\\w*)\\\\s+(\\\\w+)(;|=)?","title":"Field Keywords","description":"Modifiers, type and name of a field declaration.","documentation":"Modifiers, type and name of a field declaration."}},"methodKeywords":{"type":"array","title":"Method Keywords Collection","description":"Contains all expected keywords for all present methods.","documentation":"All expected keywords of the method declarations. The input here follows the same format as the Java method declarations.\\n\\nFormat: [access modifier] [non access modifier] [return type] [name]. Anything after the name, such as further parameters, will not be considered and can be omitted. Additionally, if one wishes to allow any keyword, one can replace the keyword with a *(asterisk) to indicate that any value is allowed there.\\n\\n### Examples:\\n\\n- ```protected String getName```\\n- ```* String getStatus``` (indicating that the access modifier can be any)","items":{"type":"string","pattern":"\\\\s*(\\\\w*)\\\\s+(\\\\w+)\\\\(?\\\\)?","title":"Method Keywords","description":"Modifiers, type and name of a method declaration.","documentation":"Modifiers, type and name of a method declaration."}}},"required":["classKeywords"]}},"metricsSelected":{"type":"boolean","title":"Enable Metrics Checker","description":"Enable the Configuration of the Metrics Checker.","documentation":"Enable the Configuration of the Metrics Checker.","default":false},"metrics":{"type":"object","title":"Metrics Check Configuration","description":"The Configuration for the Metrics Checker","documentation":"The Configuration for the Metrics Checker","properties":{"amcThreshold":{"type":"object","title":"Average Method Complexity","description":"Configure Average Method Complexity","documentation":"This metric measures the average method size for each class. Size of a method is equal to the number of java binary codes in the method.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","documentation":"Specify the metric\'s lower bound.","minimum":0,"default":0},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","documentation":"Specify the metric\'s upper bound.","default":0}},"required":["min","max","noMax"]},"caThreshold":{"type":"object","title":"Afferent Coupling","description":"Configure Afferent Coupling","documentation":"A class\'s afferent couplings is a measure of how many other classes use the specific class. Coupling has the same definition in context of Ca as that used for calculating CBO.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","documentation":"Specify the metric\'s lower bound.","minimum":0,"default":0},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","documentation":"Specify the metric\'s upper bound.","default":0}},"required":["min","max","noMax"]},"camThreshold":{"type":"object","title":"Cohesion Among Methods of Class","description":"Configure Cohesion Among Methods of Class","documentation":"This metric computes the relatedness among methods of a class based upon the parameter list of the methods. The metric is computed using the summation of number of different types of method parameters in every method divided by a multiplication of number of different method parameter types in whole class and number of methods. A metric value close to 1.0 is preferred. (Range 0 to 1).","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","documentation":"Specify the metric\'s lower bound.","minimum":0,"default":0},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","documentation":"Specify the metric\'s upper bound.","default":0}},"required":["min","max","noMax"]},"cbmThreshold":{"type":"object","title":"Coupling Between Methods","description":"Configure Coupling Between Methods","documentation":"The metric measure the total number of new/redefined methods to which all the inherited methods are coupled. There is a coupling when one of the given in the IC metric definition conditions holds.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"cboThreshold":{"type":"object","title":"Coupling Between Object Classes","description":"Configure Coupling Between Object Classes","documentation":"The coupling between object classes (CBO) metric represents the number of classes coupled to a given class (efferent couplings and afferent couplings). This coupling can occur through method calls, field accesses, inheritance, arguments, return types, and exceptions.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"ccThreshold":{"type":"object","title":"McCabe\'s Cyclomatic Complexity","description":"Configure McCabe\'s Cyclomatic Complexity","documentation":"It is equal to number of different paths in a method (function) plus one. The cyclomatic complexity is defined as:\\nCC = E - N + P\\nwhere\\nE - the number of edges of the graph\\nN - the number of nodes of the graph\\nP - the number of connected components","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"ceThreshold":{"type":"object","title":"Efferent Coupling","description":"Configure Efferent Coupling","documentation":"A class\'s efferent couplings is a measure of how many other classes is used by the specific class. Coupling has the same definition in context of Ce as that used for calculating CBO.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"damThreshold":{"type":"object","title":"Data Access Metric","description":"Configure Data Access Metric","documentation":"This metric is the ratio of the number of private (protected) attributes to the total number of attributes declared in the class. A high value for DAM is desired. (Range 0 to 1)","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"ditThreshold":{"type":"object","title":"Depth Of Inheritance Tree","description":"Configure Depth Of Inheritance Tree","documentation":"The depth of inheritance tree (DIT) metric provides for each class a measure of the inheritance levels from the object hierarchy top. In Java where all classes inherit Object the minimum value of DIT is 1.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"icThreshold":{"type":"object","title":"Inheritance Coupling","description":"Configure Inheritance Coupling","documentation":"This metric provides the number of parent classes to which a given class is coupled. A class is coupled to its parent class if one of its inherited methods functionally dependent on the new or redefined methods in the class. A class is coupled to its parent class if one of the following conditions is satisfied:\\n-One of its inherited methods uses a variable (or data member) that is defined in a new/redefined method.\\nOne of its inherited methods calls a redefined method.\\n-One of its inherited methods is called by a redefined method and uses a parameter that is defined in the redefined method.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"lcomThreshold":{"type":"object","title":"Lack Of Cohesion In Methods","description":"Configure Lack Of Cohesion In Methods","documentation":"A class\'s lack of cohesion in methods (LCOM) metric counts the sets of methods in a class that are not related through the sharing of some of the class\'s fields. The original definition of this metric (which is the one used in ckjm) considers all pairs of a class\'s methods. In some of these pairs both methods access at least one common field of the class, while in other pairs the two methods to not share any common field accesses. The lack of cohesion in methods is then calculated by subtracting from the number of method pairs that don\'t share a field access the number of method pairs that do. Note that subsequent definitions of this metric used as a measurement basis the number of disjoint graph components of the class\'s methods. Others modified the definition of connectedness to include calls between the methods of the class (original definition (1994) definition by Chidamber and Kemerer).","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"lcom3Threshold":{"type":"object","title":"Lack Of Cohesion In Methods Henderson-Sellers version","description":"Configure Lack Of Cohesion In Methods Henderson-Sellers version","documentation":"LCOM3 varies between 0 and 2.\\nm - number of procedures (methods) in class\\na - number of variables (attributes in class)\\n\xb5(A) - number of methods that access a variable (attribute)\\nThe constructors and static initializations are taking into accounts as separately methods.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"locThreshold":{"type":"object","title":"Lines Of Code","description":"Configure Lines Of Code","documentation":"The lines are counted from java binary code and it is the sum of number of fields, number of methods and number of instructions in every method of given class.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"mfaThreshold":{"type":"object","title":"Measure of Functional Abstraction","description":"Configure Measure of Functional Abstraction","documentation":"This metric is the ratio of the number of methods inherited by a class to the total number of methods accessible by member methods of the class. The constructors and the java.lang.Object (as parent) are ignored. (Range 0 to 1)","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"moaThreshold":{"type":"object","title":"Measure of Aggregation","description":"Configure Measure of Aggregation","documentation":"This metric measures the extent of the part-whole relationship, realized by using attributes. The metric is a count of the number of data declarations (class fields) whose types are user defined classes.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"nocThreshold":{"type":"object","title":"Number Of Children","description":"Configure Number Of Children","documentation":"A class\'s number of children (NOC) metric simply measures the number of immediate descendants of the class.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"npmThreshold":{"type":"object","title":"Number of Public Methods for a class","description":"Configure Number of Public Methods for a class","documentation":"The NPM metric simply counts all the methods in a class that are declared as public. It can be used to measure the size of an API provided by a package.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"rfcThreshold":{"type":"object","title":"Response For A Class","description":"Configure Response For A Class","documentation":"The metric called the response for a class (RFC) measures the number of different methods that can be executed when an object of that class receives a message (when a method is invoked for that object). Ideally, we would want to find for each method of the class, the methods that class will call, and repeat this for each called method, calculating what is called the transitive closure of the method\'s call graph. This process can however be both expensive and quite inaccurate. Here, a rough approximation to the response set is calculated by simply inspecting method calls within the class\'s method bodies. The value of RFC is the sum of number of methods called within the class\'s method bodies and the number of class\'s methods. This simplification was also used in the 1994 Chidamber and Kemerer description of the metrics.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]},"wmcThreshold":{"type":"object","title":"Weighted methods per class","description":"Configure Weighted methods per class","documentation":"A class\'s weighted methods per class WMC metric is simply the sum of the complexities of its methods. As a measure of complexity we can use the cyclomatic complexity, or we can abritrarily assign a complexity value of 1 to each method. The ckjm program assigns a complexity value of 1 to each method, and therefore the value of the WMC is equal to the number of methods in the class.","properties":{"min":{"type":"number","title":"Lower Bound","description":"Specify the metric\'s lower bound.","minimum":0,"default":0,"documentation":"Specify the metric\'s lower bound."},"noMax":{"type":"boolean","title":"No Upper Bound","description":"Select if no upper bound should be enforced for this metric.","documentation":"Select if no upper bound should be enforced for this metric.","default":true},"max":{"type":"number","title":"Upper Bound","description":"Specify the metric\'s upper bound.","default":0,"documentation":"Specify the metric\'s upper bound."}},"required":["min","max","noMax"]}},"required":["amcThreshold","caThreshold","camThreshold","cbmThreshold","cboThreshold","ccThreshold","ceThreshold","damThreshold","ditThreshold","icThreshold","lcomThreshold","lcom3Threshold","locThreshold","mfaThreshold","moaThreshold","nocThreshold","npmThreshold","rfcThreshold","wmcThreshold"]}},"required":["syntax","styleSelected","semanticsSelected","coverageSelected","classSelected","metricsSelected"]}')},288:function(e){e.exports=JSON.parse('{"type":"Categorization","elements":[{"type":"Category","label":"Main Settings","elements":[{"type":"Control","scope":"#/properties/syntax"},{"type":"HorizontalLayout","elements":[{"type":"Control","scope":"#/properties/styleSelected"},{"type":"Control","scope":"#/properties/semanticsSelected"},{"type":"Control","scope":"#/properties/coverageSelected"},{"type":"Control","scope":"#/properties/classSelected"},{"type":"Control","scope":"#/properties/metricsSelected"}]}]},{"type":"Category","label":"Style Checker","elements":[{"type":"Control","scope":"#/properties/style"}],"rule":{"effect":"SHOW","condition":{"scope":"#/properties/styleSelected","schema":{"const":true}}}},{"type":"Category","label":"Solution Approach Checker","elements":[{"type":"Control","scope":"#/properties/semantic"}],"rule":{"effect":"SHOW","condition":{"scope":"#/properties/semanticsSelected","schema":{"const":true}}}},{"type":"Category","label":"Test Coverage Checker","elements":[{"type":"Control","scope":"#/properties/coverage"}],"rule":{"effect":"SHOW","condition":{"scope":"#/properties/coverageSelected","schema":{"const":true}}}},{"type":"Category","label":"Class Checker","elements":[{"type":"Control","scope":"#/properties/class"}],"rule":{"effect":"SHOW","condition":{"scope":"#/properties/classSelected","schema":{"const":true}}}},{"type":"Category","label":"Metrics Checker","elements":[{"type":"Control","scope":"#/properties/metrics"}],"rule":{"effect":"SHOW","condition":{"scope":"#/properties/metricsSelected","schema":{"const":true}}}}]}')},291:function(e,t,o){"use strict";o.r(t);var i=o(24),n=o(292),r=o(2);t.default=Object(i.withJsonFormsControlProps)((function(e){var t=e.data,o=e.handleChange,i=e.path;return Object(r.jsx)(n.Rating,{value:t,updateValue:function(e){return o(i,e)}})}))},292:function(e,t,o){"use strict";o.r(t),o.d(t,"Rating",(function(){return a}));var i=o(13),n=o(0),r=o(392),s=o(2),a=function(e){var t=e.id,o=e.value,a=e.updateValue,c=Object(n.useState)(null),d=Object(i.a)(c,2),l=d[0],u=d[1];return Object(s.jsxs)("div",{id:"#/properties/rating",className:"rating",children:[Object(s.jsx)(r.a,{shrink:!0,style:{marginTop:"0.8em"},children:"Rating"}),Object(s.jsx)("div",{style:{cursor:"pointer",fontSize:"18px"},children:[0,1,2,3,4].map((function(e){var i=null!==l&&void 0!==l?l:o;return Object(s.jsx)("span",{onMouseOver:function(){return u(e+1)},onMouseOut:function(){return u(null)},onClick:function(){return a(e+1)},children:e<i?"\u2605":"\u2606"},"".concat(t,"_").concat(e))}))})]})}},293:function(e,t,o){"use strict";o.r(t);var i=o(19);t.default=Object(i.rankWith)(3,Object(i.scopeEndsWith)("rating"))},387:function(e,t,o){"use strict";o.r(t),t.default=o.p+"static/media/logo.93c1a760.png"},529:function(e,t,o){},855:function(e,t,o){var i={"./":[236,9],"./App":[241,9],"./App.css":[529,7],"./App.test":[597,9,0],"./App.test.tsx":[597,9,0],"./App.tsx":[241,9],"./Markdown":[100,9],"./Markdown.tsx":[100,9],"./Rating":[292,9],"./Rating.tsx":[292,9],"./RatingControl":[291,9],"./RatingControl.tsx":[291,9],"./doc2desc.sh":[939,9,5],"./index":[236,9],"./index.tsx":[236,9],"./logo.png":[387,9],"./mass-docgen-conf.yaml":[940,9,6],"./mass-doku.md":[941,9,7],"./mass.schema":[287,3],"./mass.schema.json":[287,3],"./mass.uischema":[288,3],"./mass.uischema.json":[288,3],"./qped-mass.md":[942,9,8],"./ratingControlTester":[293,9],"./ratingControlTester.ts":[293,9],"./react-app-env.d":[598,7,1],"./react-app-env.d.ts":[598,7,1],"./tutorials/qped-class.md":[943,9,9],"./tutorials/qped-coverage.md":[944,9,10],"./tutorials/qped-design.md":[945,9,11],"./tutorials/qped-semantics.md":[946,9,12],"./tutorials/qped-style.md":[947,9,13]};function n(e){if(!o.o(i,e))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=i[e],n=t[0];return Promise.all(t.slice(2).map(o.e)).then((function(){return o.t(n,t[1])}))}n.keys=function(){return Object.keys(i)},n.id=855,e.exports=n}},[[236,3,4]]]);
//# sourceMappingURL=main.f2cdcb31.chunk.js.map